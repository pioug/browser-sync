"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var task_utils_1 = require("./task.utils");
var debug = require("debug")("cb:command.run");
var Rx = require("rx");
var Immutable = require("immutable");
var logger_1 = require("./logger");
var task_resolve_1 = require("./task.resolve");
var command_run_1 = require("./command.run");
var task_list_1 = require("./reporters/task.list");
var reporter_resolve_1 = require("./reporter.resolve");
var defaultReporter_1 = require("./reporters/defaultReporter");
function prompt(cli, input, config, reporter) {
    var possibleSelection = cli.input.slice(1);
    var inquirer = require("inquirer");
    var allTaskNames = task_utils_1.getPossibleTaskNames(input);
    var filtered = possibleSelection.reduce(function (acc, name) {
        return acc.concat(allTaskNames
            .filter(function (x) { return x.indexOf(name + ":") === 0; }));
    }, []);
    var taskNamesToShow = (function () {
        if (filtered.length)
            return filtered;
        return allTaskNames;
    })();
    var resolved = task_resolve_1.resolveTasks(taskNamesToShow, {
        shared: new Rx.BehaviorSubject(Immutable.Map({})),
        cli: cli,
        input: input,
        config: config,
        reporter: reporter,
        type: command_run_1.TriggerTypes.command
    });
    if (resolved.invalid.length) {
        reporter({ type: reporter_resolve_1.ReportTypes.TaskTree, data: { tasks: resolved.all, config: config, title: "Available tasks:" } });
        return Rx.Observable.empty();
    }
    else {
        var taskSelect = {
            type: "checkbox",
            message: "Select Tasks to run with <space>",
            name: "tasks",
            choices: getTaskList(resolved.valid),
            validate: function (answer) {
                if (answer.length < 1) {
                    return "You must choose at least one task";
                }
                return true;
            }
        };
        return Rx.Observable.fromPromise(inquirer.prompt(taskSelect));
    }
}
exports.default = prompt;
function getTaskList(tasks) {
    var topLevelTasks = tasks.filter(function (x) { return !task_utils_1.isInternal(x.baseTaskName); });
    var longest = task_utils_1.getLongestTaskName(topLevelTasks);
    var col = task_list_1.twoCol(topLevelTasks, longest);
    return col.map(function (tuple, i) {
        return {
            name: logger_1.compile(tuple[0] + " " + tuple[1]),
            value: (function () {
                return defaultReporter_1.getCleanLabel(topLevelTasks[i]);
            })()
        };
    });
}
exports.getTaskList = getTaskList;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5ydW4uaW50ZXJhY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY29tbWFuZC5ydW4uaW50ZXJhY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBa0Y7QUFDbEYsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDakQsdUJBQTBCO0FBQzFCLHFDQUF3QztBQUN4QyxtQ0FBaUM7QUFHakMsK0NBQXVEO0FBQ3ZELDZDQUEyQztBQUUzQyxtREFBNkM7QUFDN0MsdURBQStDO0FBQy9DLCtEQUFvRTtBQU1wRSxTQUF3QixNQUFNLENBQUMsR0FBUSxFQUFFLEtBQW9CLEVBQUUsTUFBNkIsRUFBRSxRQUEwQjtJQUVwSCxJQUFNLGlCQUFpQixHQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlDLElBQU0sUUFBUSxHQUFhLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMvQyxJQUFNLFlBQVksR0FBUyxpQ0FBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV2RCxJQUFNLFFBQVEsR0FBYSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsSUFBSTtRQUMxRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWTthQUN6QixNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsT0FBTyxDQUFJLElBQUksTUFBRyxDQUFDLEtBQUssQ0FBQyxFQUEzQixDQUEyQixDQUFDLENBQzVDLENBQUM7SUFDTixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFUCxJQUFNLGVBQWUsR0FBRyxDQUFDO1FBQ3JCLElBQUksUUFBUSxDQUFDLE1BQU07WUFBRSxPQUFPLFFBQVEsQ0FBQztRQUNyQyxPQUFPLFlBQVksQ0FBQztJQUN4QixDQUFDLENBQUMsRUFBRSxDQUFDO0lBRUwsSUFBTSxRQUFRLEdBQUcsMkJBQVksQ0FBQyxlQUFlLEVBQUU7UUFDM0MsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELEdBQUcsS0FBQTtRQUNILEtBQUssT0FBQTtRQUNMLE1BQU0sUUFBQTtRQUNOLFFBQVEsVUFBQTtRQUNSLElBQUksRUFBRSwwQkFBWSxDQUFDLE9BQU87S0FDN0IsQ0FBQyxDQUFDO0lBRUgsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtRQUV6QixRQUFRLENBQUMsRUFBQyxJQUFJLEVBQUUsOEJBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxRQUFBLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ3ZHLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQVcsQ0FBQztLQUV6QztTQUFNO1FBQ0gsSUFBTSxVQUFVLEdBQUc7WUFDZixJQUFJLEVBQUUsVUFBVTtZQUNoQixPQUFPLEVBQUUsa0NBQWtDO1lBQzNDLElBQUksRUFBRSxPQUFPO1lBQ2IsT0FBTyxFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQ3BDLFFBQVEsRUFBRSxVQUFVLE1BQWdCO2dCQUNoQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUNuQixPQUFPLG1DQUFtQyxDQUFDO2lCQUM5QztnQkFDRCxPQUFPLElBQUksQ0FBQztZQUNoQixDQUFDO1NBQ0osQ0FBQztRQUNGLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQVUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0tBQzFFO0FBQ0wsQ0FBQztBQTlDRCx5QkE4Q0M7QUFFRCxTQUFnQixXQUFXLENBQUMsS0FBYTtJQUNyQyxJQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyx1QkFBVSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBM0IsQ0FBMkIsQ0FBQyxDQUFDO0lBQ3JFLElBQU0sT0FBTyxHQUFTLCtCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3hELElBQU0sR0FBRyxHQUFhLGtCQUFNLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BCLE9BQU87WUFDSCxJQUFJLEVBQUUsZ0JBQU8sQ0FBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQUksS0FBSyxDQUFDLENBQUMsQ0FBRyxDQUFDO1lBQ3hDLEtBQUssRUFBRSxDQUFDO2dCQUNKLE9BQU8sK0JBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQyxDQUFDLENBQUMsRUFBRTtTQUNQLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFaRCxrQ0FZQyJ9