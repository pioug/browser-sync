"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var task_resolve_1 = require("./task.resolve");
var path_1 = require("path");
var command_init_1 = require("./command.init");
var _ = require("../lodash.custom");
var SignalTypes;
(function (SignalTypes) {
    SignalTypes[SignalTypes["Exit"] = "Exit"] = "Exit";
    SignalTypes[SignalTypes["FileWrite"] = "FileWrite"] = "FileWrite";
})(SignalTypes = exports.SignalTypes || (exports.SignalTypes = {}));
/**
 * @type {{cwd: *, runMode: string, resumeOnError: boolean, summary: string, strict: boolean}}
 */
var defaults = {
    /**
     * The current working directory, we never advise changing this
     */
    cwd: process.cwd(),
    /**
     * By default, tasks will wait in line and run when the previous
     * one completes. You can set this to 'parallel' instead
     * if you wish for your code to run as fast as possible
     */
    runMode: "series",
    resumeOnError: false,
    parallel: false,
    input: [],
    bin: [],
    binExecutables: [],
    binDirectories: [],
    /**
     * Dump json to disk for debugging
     */
    dump: false,
    debug: false,
    dryRun: false,
    dryRunDuration: 500,
    force: false,
    /**
     * How much task information should be output
     * following task completion/setup
     */
    verbose: 2,
    /**
     * How should task summaries be output
     */
    reporter: "default",
    /**
     * Will eliminate any crossbow output.
     *
     */
    outputOnly: false,
    /**
     * What to do with child process output
     */
    suppressOutput: false,
    /**
     * Log when tasks start/end
     */
    progress: false,
    /**
     * should the resolved workload be handed off
     * to the caller?
     */
    handoff: false,
    /**
     * Show the prompt for selecting tasks?
     */
    interactive: false,
    /**
     *
     */
    loadDefaultInputs: false,
    /**
     *
     */
    nodeModulesPaths: ["node_modules"],
    /**
     *
     * CI mode - will exit if any shell/npm scripts
     * return a non-zero exit code
     *
     * Should a failing task be allowed to quit the process?
     */
    fail: true,
    /**
     * Crossbow will add all options to your environment vars
     * and will be path-based + prefixed
     * eg:
     *  options: {
     *      docker: {
     *          port: 8000
     *      }
     *  }
     *
     *  ->
     *      CB_DOCKER_PORT=8000
     */
    envPrefix: "cb",
    /**
     *
     */
    envFile: [],
    envFiles: [],
    envFilePrefix: [],
    /**
     * Global ENV vars
     */
    env: {},
    /**
     * Tasks that should be run before any watchers begin
     */
    before: [],
    /**
     * Any tasks that should be skipped
     */
    skip: [],
    /**
     *
     */
    type: command_init_1.InitConfigFileTypes.yaml,
    reporters: [],
    tasksDir: ["tasks"]
};
/**
 * Allow single char flags such as
 *    $ crossbow run task1 task2 -p
 *
 * @type {{p: flagTransforms.p}}
 */
var flagTransforms = {
    /**
     * Take any -e flags and set them
     * on the config.env vars.
     *
     * eg: crossbow run task.js -e PET=kittie
     */
    e: function (opts) {
        opts.e.forEach(function (inputString) {
            var split = inputString.split("=").map(function (x) { return x.trim(); }).filter(Boolean);
            if (split.length === 2) {
                opts.env[split[0]] = split[1];
            }
        });
        return opts;
    },
    /**
     * If parallel run mode has been set, update the
     * corresponding runMode options too
     */
    parallel: function (opts) {
        if (opts.parallel === true) {
            opts.runMode = task_resolve_1.TaskRunModes.parallel;
            return opts;
        }
        opts.runMode = task_resolve_1.TaskRunModes.series;
        return opts;
    },
    cwd: function (opts) {
        opts.cwd = path_1.resolve(opts.cwd);
        return opts;
    },
    input: function (opts) {
        if (opts.input && !Array.isArray(opts.input)) {
            opts.input = [opts.input];
        }
        return opts;
    }
};
/**
 * Merge default with incoming opts.
 * Also deal with single char flag
 * @returns {*}
 */
function merge(opts) {
    var newOpts = _.assign({}, defaults, opts);
    return Object.keys(flagTransforms)
        .reduce(function (opts, x) {
        if (opts[x] !== undefined) {
            return flagTransforms[x].call(null, opts);
        }
        return opts;
    }, newOpts);
}
exports.merge = merge;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUE0QztBQUc1Qyw2QkFBNkI7QUFDN0IsK0NBQW1EO0FBT25ELElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRXRDLElBQVksV0FHWDtBQUhELFdBQVksV0FBVztJQUNuQixrQ0FBWSxNQUFNLFVBQUEsQ0FBQTtJQUNsQix1Q0FBaUIsV0FBVyxlQUFBLENBQUE7QUFDaEMsQ0FBQyxFQUhXLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBR3RCO0FBK0VEOztHQUVHO0FBQ0gsSUFBTSxRQUFRLEdBQTBCO0lBQ3BDOztPQUVHO0lBQ0gsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUU7SUFDbEI7Ozs7T0FJRztJQUNILE9BQU8sRUFBTyxRQUFRO0lBQ3RCLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLFFBQVEsRUFBRSxLQUFLO0lBQ2YsS0FBSyxFQUFFLEVBQUU7SUFDVCxHQUFHLEVBQUUsRUFBRTtJQUNQLGNBQWMsRUFBRSxFQUFFO0lBQ2xCLGNBQWMsRUFBRSxFQUFFO0lBQ2xCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLEtBQUs7SUFDWCxLQUFLLEVBQUUsS0FBSztJQUNaLE1BQU0sRUFBRSxLQUFLO0lBQ2IsY0FBYyxFQUFFLEdBQUc7SUFDbkIsS0FBSyxFQUFFLEtBQUs7SUFDWjs7O09BR0c7SUFDSCxPQUFPLEVBQUUsQ0FBQztJQUNWOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFNBQVM7SUFDbkI7OztPQUdHO0lBQ0gsVUFBVSxFQUFFLEtBQUs7SUFDakI7O09BRUc7SUFDSCxjQUFjLEVBQUUsS0FBSztJQUNyQjs7T0FFRztJQUNILFFBQVEsRUFBRSxLQUFLO0lBQ2Y7OztPQUdHO0lBQ0gsT0FBTyxFQUFFLEtBQUs7SUFDZDs7T0FFRztJQUNILFdBQVcsRUFBRSxLQUFLO0lB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