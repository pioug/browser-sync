"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var task_resolve_1 = require("./task.resolve");
var _ = require("../lodash.custom");
var debug = require("debug")("cb:task.tree.transform");
function applyBooleanPropertyToChildren(tasks, skipped) {
    tasks.forEach(function (task) {
        if (skipped) {
            task.skipped = true;
        }
        if (task.skipped) {
            if (task.tasks.length) {
                applyBooleanPropertyToChildren(task.tasks, true);
                return;
            }
        }
        if (task.tasks.length) {
            applyBooleanPropertyToChildren(task.tasks, false);
        }
    });
}
exports.transforms = {
    "Add skipped property to children": {
        predicate: function (tasks) {
            return true;
        },
        fn: function (tasks) {
            applyBooleanPropertyToChildren(tasks, false);
            return tasks;
        }
    },
    "Add if property to children": {
        predicate: function (tasks) {
            return true;
        },
        fn: function (tasks) {
            applyBooleanPropertyToChildren(tasks, false, "ifChanged", "");
            function applyBooleanPropertyToChildren(tasks, add, property, value) {
                tasks.forEach(function (task) {
                    if (add) {
                        task[property].unshift.apply(task[property], [].concat(value));
                    }
                    if (task[property].length) {
                        if (task.tasks.length) {
                            applyBooleanPropertyToChildren(task.tasks, true, property, task[property]);
                            return;
                        }
                    }
                    if (task.tasks.length) {
                        applyBooleanPropertyToChildren(task.tasks, false, property);
                    }
                });
            }
            return tasks;
        }
    },
    "Pass options/flags/query from Groups -> Tasks": {
        predicate: function () {
            return true;
        },
        fn: function (tasks) {
            addProps(tasks);
            function addProps(tasks) {
                tasks.forEach(function (task) {
                    if (task.type === task_resolve_1.TaskTypes.TaskGroup) {
                        task.tasks.forEach(function (childTask) {
                            if (childTask.type === task_resolve_1.TaskTypes.TaskGroup) {
                                addProps(childTask.tasks);
                            }
                            else {
                                childTask.flags = _.merge({}, childTask.flags, task.flags);
                                childTask.query = _.merge({}, childTask.query, task.query);
                            }
                        });
                    }
                    if (task.type === task_resolve_1.TaskTypes.ParentGroup && task.tasks.length) {
                        addProps(task.tasks);
                    }
                });
            }
            return tasks;
        }
    }
};
/**
 * Allow transformations on tasks before error collections
 */
function applyTreeTransforms(incoming) {
    return Object.keys(exports.transforms).reduce(function (task, key) {
        var transform = exports.transforms[key];
        if (transform.predicate(task)) {
            debug("Applying transform " + key);
            return transform.fn(task);
        }
        return incoming;
    }, incoming);
}
exports.applyTreeTransforms = applyTreeTransforms;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay50cmVlLnRyYW5zZm9ybXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGFzay50cmVlLnRyYW5zZm9ybXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQ0FBK0M7QUFDL0MsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDdEMsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFPekQsU0FBUyw4QkFBOEIsQ0FBRSxLQUFhLEVBQUUsT0FBZ0I7SUFDcEUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUk7UUFDeEIsSUFBSSxPQUFPLEVBQUU7WUFDVCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUN2QjtRQUNELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNkLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0JBQ25CLDhCQUE4QixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ2pELE9BQU87YUFDVjtTQUNKO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNuQiw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3JEO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBRVksUUFBQSxVQUFVLEdBQUc7SUFFdEIsa0NBQWtDLEVBQUc7UUFDakMsU0FBUyxFQUFULFVBQVcsS0FBYTtZQUNwQixPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQ0QsRUFBRSxFQUFGLFVBQUksS0FBYTtZQUNiLDhCQUE4QixDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM3QyxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDO0tBQ0o7SUFDRCw2QkFBNkIsRUFBRztRQUM1QixTQUFTLEVBQVQs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