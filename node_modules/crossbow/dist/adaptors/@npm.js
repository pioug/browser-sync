"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Immutable = require("immutable");
var events_1 = require("events");
var child_process_1 = require("child_process");
var debug = require("debug")("cb:adaptors.npm");
var _ = require("../../lodash.custom");
var path_1 = require("path");
var task_utils_1 = require("../task.utils");
var sh = "sh";
var shFlag = "-c";
if (process.platform === "win32") {
    // todo test in windows env to ensure this hasn't broken anything
    // sh = process.env.comspec || 'cmd';
    sh = "cmd";
    shFlag = "/d /s /c";
}
function runCommand(args, options) {
    var raw = child_process_1.spawn(sh, args, options);
    var cooked = new events_1.EventEmitter();
    raw.on("error", function (er) {
        er.file = [sh, args].join(" ");
        cooked.emit("error", er);
    }).on("close", function (code, signal) {
        if (code === 127) {
            var er = new Error("spawn ENOENT");
            er.code = "ENOENT";
            er.errno = "ENOENT";
            er.syscall = "spawn";
            er.file = [sh, args].join(" ");
            cooked.emit("error", er);
        }
        else {
            cooked.emit("close", code, signal);
        }
    });
    cooked.stdin = raw.stdin;
    cooked.stdout = raw.stdout;
    cooked.stderr = raw.stderr;
    cooked.raw = raw;
    cooked.kill = function (sig) {
        return raw.kill(sig);
    };
    return cooked;
}
exports.runCommand = runCommand;
/**
 * Add the local ./node_modules/.bin directory to the beginning
 * of the users PATH - this will allow it to find local scripts
 * @param {process.env} process
 * @param {Immutable.Map} config
 * @param paths
 * @returns {object}
 */
function getEnv(process, config, paths) {
    var binDirs = Immutable.Set(config.binDirectories.map(function (x) { return x.resolved; }).concat(paths));
    var PATH = binDirs.add(process.env.PATH).join(":");
    return { PATH: PATH };
}
exports.getEnv = getEnv;
function getArgs(command) {
    return {
        stringInput: command,
        cmd: [shFlag].concat(command),
        errors: []
    };
}
exports.getArgs = getArgs;
function teardown(emitter, task) {
    if ((typeof emitter.raw.exitCode) !== "number") {
        debug("tearing down a child_process because exitCode is missing");
        emitter.removeAllListeners("close");
        emitter.kill("SIGINT");
        emitter.on("close", function () {
            debug("close method on child encountered");
            // todo - async teardown for sequential
        });
    }
    else {
        debug("child process already completed, not disposing");
    }
}
exports.teardown = teardown;
function getStdio(trigger) {
    // todo - prefixed logging for child processes
    if (trigger.config.suppressOutput) {
        return ["pipe", "pipe", "pipe"];
    }
    // process.stdin, process.stdout, process.stderr
    return [process.stdin, process.stdout, "pipe"];
}
exports.getStdio = getStdio;
function handleExit(emitter, done) {
    var stderr = [];
    emitter.stderr.on("data", function (data) {
        stderr.push(data);
    });
    emitter.on("close", function (code) {
        // todo: Make pretty errors that originate from child processes
        if (code !== 0) {
            var err = new Error("Previous command failed with exit code " + code);
            if (stderr.length) {
                err.stack = stderr.map(String).join("");
            }
            else {
                err.stack = "Previous command failed with exit code " + code;
            }
            err._cbError = true;
            err._cbExitCode = code;
            return done(err);
        }
        done();
    }).on("error", function (err) {
        done(err);
    });
}
exports.handleExit = handleExit;
/**
 * The main export is the function this will be run in the sequence
 * @returns {Function}
 */
function default_1(task, trigger) {
    return function (opts, ctx, done) {
        var commandArgs = getArgs(task.command);
        var npmEnv = getEnv(process, trigger.config, [path_1.join(trigger.config.cwd, "node_modules", ".bin")]);
        var cbEnv = task_utils_1.getCBEnv(trigger);
        var ctxEnv = task_utils_1.getContextEnv(trigger, ctx);
        var env = _.merge({}, process.env, npmEnv, cbEnv, task.env, trigger.config.env, ctxEnv);
        var stdio = getStdio(trigger);
        debug("+ running '%s %s'", sh, commandArgs.cmd.join(" "));
        var emitter = runCommand(commandArgs.cmd, {
            cwd: trigger.config.cwd,
            env: env,
            stdio: stdio // [process.stdin, process.stdout, process.stderr]
        });
        handleExit(emitter, done);
        return function tearDownNpmAdaptor() {
            teardown(emitter, task);
        };
    };
}
exports.default = default_1;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQG5wbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGFwdG9ycy9AbnBtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EscUNBQXdDO0FBRXhDLGlDQUFvQztBQUNwQywrQ0FBb0M7QUFDcEMsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDbEQsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFFekMsNkJBQTBCO0FBRTFCLDRDQUFzRDtBQUV0RCxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDZCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFFbEIsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRTtJQUM5QixpRUFBaUU7SUFDakUscUNBQXFDO0lBQ3JDLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDWCxNQUFNLEdBQUcsVUFBVSxDQUFDO0NBQ3ZCO0FBdUJELFNBQVMsVUFBVSxDQUFDLElBQWMsRUFBRSxPQUF1QjtJQUN2RCxJQUFNLEdBQUcsR0FBRyxxQkFBSyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckMsSUFBTSxNQUFNLEdBQWMsSUFBSSxxQkFBWSxFQUFFLENBQUM7SUFFN0MsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFO1FBQ3ZCLEVBQVUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxJQUFJLEVBQUUsTUFBTTtRQUNqQyxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUU7WUFDZCxJQUFJLEVBQUUsR0FBdUIsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDdkQsRUFBRSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7WUFDbkIsRUFBRSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7WUFDcEIsRUFBRSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7WUFDckIsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDNUI7YUFBTTtZQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN0QztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ3pCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUMzQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDM0IsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakIsTUFBTSxDQUFDLElBQUksR0FBRyxVQUFVLEdBQUc7UUFDdkIsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUMsQ0FBQztJQUVGLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFrSE8sZ0NBQVU7QUFoSGxCOzs7Ozs7O0dBT0c7QUFDSCxTQUFTLE1BQU0sQ0FBQyxPQUFZLEVBQUUsTUFBNkIsRUFBRSxLQUFnQjtJQUN6RSxJQUFNLE9BQU8sR0FBSSxTQUFTLENBQUMsR0FBRyxDQUFLLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLFFBQVEsRUFBVixDQUFVLENBQUMsUUFBSyxLQUFLLEVBQUUsQ0FBQztJQUMxRixJQUFNLElBQUksR0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pELE9BQU8sRUFBQyxJQUFJLE1BQUEsRUFBQyxDQUFDO0FBQ2xCLENBQUM7QUFvRzRCLHdCQUFNO0FBNUZuQyxTQUFTLE9BQU8sQ0FBQyxPQUFlO0lBQzVCLE9BQU87UUFDSCxXQUFXLEVBQUUsT0FBTztRQUNwQixHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQzdCLE1BQU0sRUFBRSxFQUFFO0tBQ2IsQ0FBQztBQUNOLENBQUM7QUFzRm1CLDBCQUFPO0FBcEYzQixTQUFnQixRQUFRLENBQUMsT0FBTyxFQUFFLElBQVU7SUFDeEMsSUFBSSxDQUFDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDNUMsS0FBSyxDQUFDLDBEQUEwRCxDQUFDLENBQUM7UUFDbEUsT0FBTyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUU7WUFDaEIsS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7WUFDM0MsdUNBQXVDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO0tBQ047U0FBTTtRQUNILEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0tBQzNEO0FBQ0wsQ0FBQztBQVpELDRCQVlDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLE9BQXVCO0lBQzVDLDhDQUE4QztJQUM5QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFO1FBQy9CLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ25DO0lBRUQsZ0RBQWdEO0lBQ2hELE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQVJELDRCQVFDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJO0lBQ3BDLElBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUVsQixPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxJQUFJO1FBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUk7UUFFOUIsK0RBQStEO1FBQy9ELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtZQUNaLElBQU0sR0FBRyxHQUFrQixJQUFJLEtBQUssQ0FBQyw0Q0FBMEMsSUFBTSxDQUFDLENBQUM7WUFDdkYsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO2dCQUNmLEdBQUcsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDM0M7aUJBQU07Z0JBQ0gsR0FBRyxDQUFDLEtBQUssR0FBRyw0Q0FBMEMsSUFBTSxDQUFDO2FBQ2hFO1lBRUQsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDcEIsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFFdkIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEI7UUFDRCxJQUFJLEVBQUUsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxHQUFHO1FBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNkLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQTNCRCxnQ0EyQkM7QUFFRDs7O0dBR0c7QUFDSCxtQkFBeUIsSUFBVSxFQUFFLE9BQXVCO0lBRXhELE9BQU8sVUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFFbkIsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxJQUFNLE1BQU0sR0FBUSxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxXQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RyxJQUFNLEtBQUssR0FBUyxxQkFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLElBQU0sTUFBTSxHQUFRLDBCQUFhLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELElBQU0sR0FBRyxHQUFXLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xHLElBQU0sS0FBSyxHQUFTLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0QyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFMUQsSUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDeEMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRztZQUN2QixHQUFHLEVBQUUsR0FBRztZQUNSLEtBQUssRUFBRSxLQUFLLENBQUMsa0RBQWtEO1NBQ2xFLENBQUMsQ0FBQztRQUVILFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFMUIsT0FBTyxTQUFTLGtCQUFrQjtZQUM5QixRQUFRLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztBQUNOLENBQUM7QUF6QkQsNEJBeUJDO0FBQUEsQ0FBQyJ9