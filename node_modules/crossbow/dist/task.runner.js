"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var task_resolve_1 = require("./task.resolve");
var task_return_values_1 = require("./task.return.values");
var Rx = require("rx");
var debug = require("debug")("cb:task.runner");
var _ = require("../lodash.custom");
var once = require("once");
var domain = require("domain");
var TaskReportType;
(function (TaskReportType) {
    TaskReportType[TaskReportType["start"] = "start"] = "start";
    TaskReportType[TaskReportType["end"] = "end"] = "end";
    TaskReportType[TaskReportType["error"] = "error"] = "error";
})(TaskReportType = exports.TaskReportType || (exports.TaskReportType = {}));
var TaskSkipReasons;
(function (TaskSkipReasons) {
    TaskSkipReasons[TaskSkipReasons["SkipFlag"] = "SkipFlag"] = "SkipFlag";
    TaskSkipReasons[TaskSkipReasons["IfChanged"] = "IfChanged"] = "IfChanged";
})(TaskSkipReasons = exports.TaskSkipReasons || (exports.TaskSkipReasons = {}));
/**
 * This creates a wrapper around the actual function that will be run.
 * This done to allow the before/after reporting to work as expected for consumers
 */
function time(scheduler) {
    return scheduler ? scheduler.now() : new Date().getTime();
}
exports.time = time;
function createObservableFromSequenceItem(item, trigger, ctx) {
    var taskTrigger = _.assign({}, trigger, ctx.toJS());
    return Rx.Observable.create(function (observer) {
        var startTime = time(taskTrigger.config.scheduler);
        /**
         * Complete immediately if this item was marked
         * as 'skipped'
         */
        if (!taskTrigger.config.force && item.task.skipped) {
            var additionalStats = {
                skipped: true,
                skippedReason: TaskSkipReasons.SkipFlag
            };
            var stats_1 = getStartStats(startTime, additionalStats);
            observer.onNext(getTaskReport(TaskReportType.start, item, stats_1));
            observer.onNext(getTaskReport(TaskReportType.end, item, getEndStats(stats_1, startTime, additionalStats)));
            observer.onCompleted();
            return;
        }
        /**
         * Complete immediately if this item was marked
         * with an 'ifChanged' predicate
         */
        if (!taskTrigger.config.force && item.task.ifChanged.length && ctx.hasIn(["ifChanged"])) {
            var hasChanges = ctx
                .get("ifChanged")
                .filter(function (x) {
                return item.task.ifChanged.indexOf(x.get("userInput")) !== -1;
            })
                .some(function (x) { return x.get("changed"); });
            if (!hasChanges) {
                var additionalStats = {
                    skipped: true,
                    skippedReason: TaskSkipReasons.IfChanged
                };
                var stats_2 = getStartStats(startTime, additionalStats);
                observer.onNext(getTaskReport(TaskReportType.start, item, stats_2));
                observer.onNext(getTaskReport(TaskReportType.end, item, getEndStats(stats_2, startTime, additionalStats)));
                observer.onCompleted();
                return;
            }
        }
        /**
         * Timestamp when this task starts
         * @type {TaskStats}
         */
        var stats = getStartStats(startTime, { skipped: false });
        debug("> seqUID " + item.seqUID + " started");
        /**
         * Task started
         */
        observer.onNext(getTaskReport(TaskReportType.start, item, stats));
        /**
         * Exit after 1 second if we're in a 'dry run'
         */
        if (taskTrigger.config.dryRun) {
            return Rx.Observable
                .just("dryRun")
                .delay(taskTrigger.config.dryRunDuration, taskTrigger.config.scheduler)
                .do(function (_) {
                observer.onNext(getTaskReport(TaskReportType.end, item, getEndStats(stats, time(taskTrigger.config.scheduler))));
                observer.onCompleted();
            }).subscribe();
        }
        if (item.task.type === task_resolve_1.TaskTypes.InlineFunction
            || item.task.type === task_resolve_1.TaskTypes.ExternalTask
            || item.task.type === task_resolve_1.TaskTypes.Adaptor) {
            var argCount = item.factory.length;
            var cb_1 = once(function (err) {
                if (err) {
                    observer.onError(err);
                    return;
                }
                observer.onNext(getTaskReport(TaskReportType.end, item, getEndStats(stats, time(taskTrigger.config.scheduler))));
                observer.onCompleted();
            });
            var d_1 = domain.create();
            d_1.once("error", function (err) {
                cb_1(err);
            });
            var domainBoundFn = d_1.bind(item.factory.bind(null, item.options, taskTrigger));
            var done = function (err) {
                d_1.removeListener("error", function (err) {
                    cb_1(err);
                });
                d_1.exit();
                return cb_1.apply(null, arguments);
            };
            var result = domainBoundFn(done);
            if (result) {
                var returns = task_return_values_1.default(result, done);
                /**
                 * If the return value does not need to be consumed,
                 * but it is IS a function, assume it's the tear-down logic
                 * for this task - which also means it MUST signify completion
                 * via the callback
                 */
                if (!returns && typeof result === "function") {
                    if (argCount >= 3) {
                        return result;
                    }
                    else {
                        done(new Error("You returned tear-down logic, but you never asked for the completion callback"));
                        return;
                    }
                }
            }
            else {
                /**
                 * Assume sync function if nothing returned
                 * and 3rd argument was not asked for
                 */
                if (argCount < 3) {
                    done();
                    return;
                }
            }
        }
    }).catch(function (error) {
        /**
         * **--**--MAGIC--**--**
         * If a task throws an error of any kind, we want that error to propagate as normal,
         * but we want tp prepend an error report so that the error report can be observed
         * before the sequence ends.
         */
        return Rx.Observable.concat(Rx.Observable.just(getTaskErrorReport(item, getErrorStats(error, time(taskTrigger.config.scheduler)))), Rx.Observable.throw(error));
    });
}
exports.createObservableFromSequenceItem = createObservableFromSequenceItem;
/**
 * Factory for TaskReports
 */
function getTaskReport(type, item, stats) {
    return { type: type, item: item, stats: stats };
}
/**
 * Create a new stats object with startTime
 */
function getStartStats(startTime, additional) {
    return _.assign({}, additional, {
        startTime: startTime,
        started: true,
        endTime: 0,
        duration: 0,
        completed: false,
        errors: []
    });
}
exports.getStartStats = getStartStats;
/**
 * Create a new stats object with completed/duration flags etc
 */
function getEndStats(stats, endTime, additional) {
    return _.assign({}, stats, additional, {
        endTime: endTime,
        duration: endTime - stats.startTime,
        completed: true
    });
}
/**
 * Factory for TaskReports that errored
 */
function getTaskErrorReport(item, stats) {
    return { type: TaskReportType.error, item: item, stats: stats };
}
/**
 * Get basic stats for a task error
 */
function getErrorStats(error, endTime) {
    if (error._cbError) {
        return {
            endTime: endTime,
            completed: false,
            errors: [error],
            cbError: true,
            cbExitCode: error._cbExitCode
        };
    }
    return {
        endTime: endTime,
        completed: false,
        errors: [error]
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay5ydW5uZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGFzay5ydW5uZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQ0FBeUM7QUFJekMsMkRBQW9EO0FBR3BELHVCQUFpQztBQUdqQyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNqRCxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUN0QyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBc0NqQyxJQUFZLGNBSVg7QUFKRCxXQUFZLGNBQWM7SUFDdEIseUNBQWEsT0FBTyxXQUFBLENBQUE7SUFDcEIsdUNBQVcsS0FBSyxTQUFBLENBQUE7SUFDaEIseUNBQWEsT0FBTyxXQUFBLENBQUE7QUFDeEIsQ0FBQyxFQUpXLGNBQWMsR0FBZCxzQkFBYyxLQUFkLHNCQUFjLFFBSXpCO0FBRUQsSUFBWSxlQUdYO0FBSEQsV0FBWSxlQUFlO0lBQ3ZCLDhDQUFnQixVQUFVLGNBQUEsQ0FBQTtJQUMxQiwrQ0FBaUIsV0FBVyxlQUFBLENBQUE7QUFDaEMsQ0FBQyxFQUhXLGVBQWUsR0FBZix1QkFBZSxLQUFmLHVCQUFlLFFBRzFCO0FBWUQ7OztHQUdHO0FBQ0gsU0FBZ0IsSUFBSSxDQUFDLFNBQVU7SUFDM0IsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUM5RCxDQUFDO0FBRkQsb0JBRUM7QUFDRCxTQUFnQixnQ0FBZ0MsQ0FBQyxJQUFrQixFQUFFLE9BQXVCLEVBQUUsR0FBZTtJQUV6RyxJQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsTUFBTSxD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