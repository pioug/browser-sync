"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var command_run_1 = require("./command.run");
var reporter_resolve_1 = require("./reporter.resolve");
var task_resolve_1 = require("./task.resolve");
var Rx = require("rx");
var command_run_context_1 = require("./command.run.context");
var debug = require("debug")("cb:command.run.execute");
var RunCommandReportTypes;
(function (RunCommandReportTypes) {
    RunCommandReportTypes[RunCommandReportTypes["NoTasks"] = "NoTasks"] = "NoTasks";
    RunCommandReportTypes[RunCommandReportTypes["Setup"] = "Setup"] = "Setup";
    RunCommandReportTypes[RunCommandReportTypes["Complete"] = "Complete"] = "Complete";
    RunCommandReportTypes[RunCommandReportTypes["TaskReport"] = "TaskReport"] = "TaskReport";
})(RunCommandReportTypes = exports.RunCommandReportTypes || (exports.RunCommandReportTypes = {}));
function executeRunCommand(trigger) {
    var cli = trigger.cli, input = trigger.input, config = trigger.config, reporter = trigger.reporter;
    var _a = command_run_1.getRunCommandSetup(trigger), tasks = _a.tasks, sequence = _a.sequence, runner = _a.runner;
    /**
     * Never continue if any tasks were flagged as invalid and we've not handed
     * off
     */
    if (tasks.invalid.length) {
        reporter({
            type: reporter_resolve_1.ReportTypes.TaskErrors,
            data: {
                tasks: tasks.all,
                taskCollection: cli.input.slice(1),
                input: input,
                config: config
            }
        });
        return {
            setup: {
                sequence: sequence,
                tasks: tasks,
                errors: []
            },
            update$: Rx.Observable.empty()
        };
    }
    debug("~ run mode from config in mode: '" + config.runMode + "'");
    /**
     * Report task list that's about to run
     */
    reporter({ type: reporter_resolve_1.ReportTypes.TaskList, data: { sequence: sequence, cli: cli, titlePrefix: "", config: config } });
    /**
     * Get a run context for this execution.
     * note: This could take some time as it may need
     * to hash directories etc. A run context is just a key=>value
     * map of read-only values.
     */
    return {
        setup: {
            sequence: sequence,
            tasks: tasks,
            errors: []
        },
        update$: command_run_context_1.default(tasks.all, trigger)
            .flatMap(function (runContext) {
            if (trigger.config.runMode === task_resolve_1.TaskRunModes.parallel) {
                return runner.parallel(runContext);
            }
            return runner.series(runContext);
        }).share()
    };
}
exports.default = executeRunCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5ydW4uZXhlY3V0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tYW5kLnJ1bi5leGVjdXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQWlFO0FBQ2pFLHVEQUErQztBQUMvQywrQ0FBbUQ7QUFJbkQsdUJBQTBCO0FBQzFCLDZEQUErQztBQUsvQyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUV6RCxJQUFZLHFCQUtYO0FBTEQsV0FBWSxxQkFBcUI7SUFDN0IseURBQW9CLFNBQVMsYUFBQSxDQUFBO0lBQzdCLHVEQUFvQixPQUFPLFdBQUEsQ0FBQTtJQUMzQiwwREFBb0IsVUFBVSxjQUFBLENBQUE7SUFDOUIsNERBQW9CLFlBQVksZ0JBQUEsQ0FBQTtBQUNwQyxDQUFDLEVBTFcscUJBQXFCLEdBQXJCLDZCQUFxQixLQUFyQiw2QkFBcUIsUUFLaEM7QUErQkQsU0FBd0IsaUJBQWlCLENBQUMsT0FBdUI7SUFFdEQsSUFBQSxpQkFBRyxFQUFFLHFCQUFLLEVBQUUsdUJBQU0sRUFBRSwyQkFBUSxDQUFZO0lBQ3pDLElBQUEsOENBQTRELEVBQTNELGdCQUFLLEVBQUUsc0JBQVEsRUFBRSxrQkFBMEMsQ0FBQztJQUVuRTs7O09BR0c7SUFDSCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1FBRXRCLFFBQVEsQ0FBQztZQUNMLElBQUksRUFBRSw4QkFBVyxDQUFDLFVBQVU7WUFDNUIsSUFBSSxFQUFFO2dCQUNGLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRztnQkFDaEIsY0FBYyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDbEMsS0FBSyxPQUFBO2dCQUNMLE1BQU0sUUFBQTthQUNXO1NBQ3hCLENBQUMsQ0FBQztRQUVILE9BQU87WUFDSCxLQUFLLEVBQUU7Z0JBQ0gsUUFBUSxVQUFBO2dCQUNSLEtBQUssT0FBQTtnQkFDTCxNQUFNLEVBQUUsRUFBRTthQUNiO1lBQ0QsT0FBTyxFQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFO1NBQ3RDLENBQUM7S0FDTDtJQUVELEtBQUssQ0FBQyxzQ0FBb0MsTUFBTSxDQUFDLE9BQU8sTUFBRyxDQUFDLENBQUM7SUFFN0Q7O09BRUc7SUFDSCxRQUFRLENBQUMsRUFBQyxJQUFJLEVBQUUsOEJBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUMsUUFBUSxVQUFBLEVBQUUsR0FBRyxLQUFBLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBQyxFQUFDLENBQUMsQ0FBQztJQUV2Rjs7Ozs7T0FLRztJQUNILE9BQU87UUFDSCxLQUFLLEVBQUU7WUFDSCxRQUFRLFVBQUE7WUFDUixLQUFLLE9BQUE7WUFDTCxNQUFNLEVBQUUsRUFBRTtTQUNiO1FBQ0QsT0FBTyxFQUFFLDZCQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUM7YUFDbEMsT0FBTyxDQUFDLFVBQUMsVUFBc0I7WUFDNUIsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSywyQkFBWSxDQUFDLFFBQVEsRUFBRTtnQkFDbEQsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3RDO1lBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRTtLQUNqQixDQUFDO0FBQ04sQ0FBQztBQTFERCxvQ0EwREMifQ==