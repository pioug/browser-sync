#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./config");
var file_utils_1 = require("./file.utils");
var input_resolve_1 = require("./input.resolve");
var reports = require("./reporter.resolve");
var Rx = require("rx");
var setup_envFile_1 = require("./setup.envFile");
var setup_bin_1 = require("./setup.bin");
var fs = require('fs');
var _ = require("../lodash.custom");
var debug = require("debug")("cb:init");
var availableCommands = {
    run: "./command.run",
    r: "./command.run",
    tasks: "./command.tasks",
    t: "./command.tasks",
    ls: "./command.tasks",
    watch: "./command.watch",
    w: "./command.watch",
    watchers: "./command.watchers",
    init: "./command.init",
    docs: "./command.docs",
};
var isCommand = function (input) { return Object.keys(availableCommands).indexOf(input) > -1; };
/**
 * This the the proxy that allows command/run mode to be handled
 * @param preparedInput
 */
function handleIncoming(preparedInput) {
    var cli = preparedInput.cli, userInput = preparedInput.userInput, config = preparedInput.config, reportFn = preparedInput.reportFn;
    // if the user provided a --cbfile flag, the type 'CBFile'
    // must be available, otherwise this is an error state
    if (userInput.type === input_resolve_1.InputTypes.CBFile) {
        return handleCBfileMode(cli, config, reportFn);
    }
    return processInput(cli, userInput.inputs[0], config, reportFn);
}
exports.handleIncoming = handleIncoming;
function handleCBfileMode(cli, config, reportFn) {
    var createFilePaths = file_utils_1.getRequirePaths(config);
    var input = require(createFilePaths.valid[0].resolved);
    input.default.config = processConfigs(_.merge({}, config, input.default.config), cli.flags);
    input.default.cli = cli;
    input.default.reporter = reportFn;
    if (isCommand(cli.input[0])) {
        return require(availableCommands[cli.input[0]]).default.call(null, cli, input.default, input.default.config, reportFn);
    }
    cli.input = ["run"].concat(cli.input);
    return require(availableCommands["run"]).default.call(null, cli, input.default, input.default.config, reportFn);
}
/**
 * Now decide who should handle the current command
 */
function processInput(cli, input, config, reportFn) {
    var firstArg = cli.input[0];
    return require(availableCommands[firstArg]).default.call(null, cli, input, config, reportFn);
}
function processConfigs(config, flags) {
    var cbConfig = _.merge({}, config, flags);
    return config_1.merge(cbConfig);
}
/**
 * This is the default export that can be
 * used as a convenience method.
 * Note: types are lost when using this method.
 */
var mergeConfigs = function (userInput, merged, flags) {
    return userInput.type !== input_resolve_1.InputTypes.StubInlineObject && userInput.type !== input_resolve_1.InputTypes.CBFile
        ? file_utils_1.Right(config_1.merge(_.merge({}, userInput.inputs[0].config, flags)))
        : file_utils_1.Right(merged);
};
var getConfig = function (flags, input) {
    return file_utils_1.Right(config_1.merge(flags))
        .chain(function (merged) { return getUserInput(merged, input)
        .chain(function (userInput) {
        return mergeConfigs(userInput, merged, flags).map(function (config) { return ({ config: config, userInput: userInput }); });
    }); });
};
var getUserInput = function (merged, input) {
    return file_utils_1.Right(input_resolve_1.getInputs(merged, input))
        .chain(function (userInput) { return userInput.errors.length
        ? file_utils_1.Left({ type: reports.ReportTypes.InputError, data: userInput })
        : file_utils_1.Right(userInput); });
};
var addReporters = function (config) {
    return file_utils_1.Right(reports.getReporters(config))
        .chain(function (reporters) {
        return reporters.invalid.length
            ? file_utils_1.Left({ type: reports.ReportTypes.InvalidReporter, data: { reporters: reporters } })
            : file_utils_1.Right(reporters.valid);
    });
};
var getReportFn = function (reporters) { return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return reporters.forEach(function (x) { return x.callable.apply(null, args); });
}; };
/**
 * Handle any type of init. It could be from the CLI, or via the API.
 * eg, any command from the CLI ultimately ends up in the following call
 *    $  crossbow run task1 -c conf/cb.js
 *    -> handleIncoming({
 *          input: ['run', 'task1'],
 *          flags: {c: 'conf/cb.js'}
 *       });
 */
function getSetup(cli, input) {
    return getConfig(cli.flags, input)
        .chain(function (setup) {
        return setup_bin_1.addBinLookupsToObject(setup.config)
            .chain(function (config) { return setup_envFile_1.addEnvFilesToObject(config); })
            .chain(function (config) { return addReporters(config)
            .map(function (reporters) {
            return {
                reporters: reporters,
                config: config,
                userInput: setup.userInput,
                cli: cli,
                reportFn: getReportFn(reporters)
            };
        }); });
    });
}
exports.getSetup = getSetup;
function default_1(cli, input) {
    return getSetup(cli, input)
        .fold(function (e) {
        return Rx.Observable.just({
            errors: [e]
        });
    }, function (prepared) {
        return handleIncoming(prepared);
    });
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsbUNBQXVFO0FBQ3ZFLDJDQUEwRDtBQUMxRCxpREFBaUU7QUFDakUsNENBQThDO0FBQzlDLHVCQUEwQjtBQUUxQixpREFBb0Q7QUFDcEQseUNBQWtEO0FBQ2xELElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6QixJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUN0QyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7QUFxQjFDLElBQU0saUJBQWlCLEdBQUc7SUFDdEIsR0FBRyxFQUFFLGVBQWU7SUFDcEIsQ0FBQyxFQUFFLGVBQWU7SUFDbEIsS0FBSyxFQUFFLGlCQUFpQjtJQUN4QixDQUFDLEVBQUUsaUJBQWlCO0lBQ3BCLEVBQUUsRUFBRSxpQkFBaUI7SUFDckIsS0FBSyxFQUFFLGlCQUFpQjtJQUN4QixDQUFDLEVBQUUsaUJBQWlCO0lBQ3BCLFFBQVEsRUFBRSxvQkFBb0I7SUFDOUIsSUFBSSxFQUFFLGdCQUFnQjtJQUN0QixJQUFJLEVBQUUsZ0JBQWdCO0NBQ3pCLENBQUM7QUFFRixJQUFNLFNBQVMsR0FBRyxVQUFDLEtBQUssSUFBSyxPQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQWxELENBQWtELENBQUM7QUFnQmhGOzs7R0FHRztBQUNILFNBQWdCLGNBQWMsQ0FBYSxhQUE0QjtJQUU1RCxJQUFBLHVCQUFHLEVBQUUsbUNBQVMsRUFBRSw2QkFBTSxFQUFFLGlDQUFRLENBQWtCO0lBRXpELDBEQUEwRDtJQUMxRCxzREFBc0Q7SUFDdEQsSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLDBCQUFVLENB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