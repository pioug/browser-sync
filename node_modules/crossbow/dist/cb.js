#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./config");
var task_runner_1 = require("./task.runner");
var cli_1 = require("./cli");
var fs_1 = require("fs");
var index_1 = require("./index");
var logger_1 = require("./logger");
var reports = require("./reporter.resolve");
var file = require("./file.utils");
var seq = require("./task.sequence");
var Rx = require("rx");
var file_utils_1 = require("./file.utils");
var debug = require("debug")("cb:cli");
var _ = require('../lodash.custom');
var parsed = cli_1.default(process.argv.slice(2));
var defaultReporter = reports.getDefaultReporter();
var defaultReporterFn = function (input) {
    var output = defaultReporter(input);
    if (output.data.length) {
        output.data.forEach(function (line) { return logger_1.default.info(line); });
    }
};
if (parsed.execute) {
    runFromCli(parsed, defaultReporterFn);
}
else {
    if (parsed.cli.flags.version) {
        console.log(parsed.output[0]);
    }
    else {
        if (parsed.output.length) {
            parsed.output.forEach(function (line) {
                logger_1.default.info(line);
            });
        }
    }
}
function runFromCli(parsed, cliDefaultReporter) {
    var addReporterIfMissing = function (setup, fn) {
        return setup.reporters.length > 0
            ? setup
            : _.assign({}, setup, { reportFn: fn });
    };
    var addSignalFnIfMissing = function (setup, obs) {
        return setup.config.signalObserver
            ? setup
            : _.set(setup, 'config.signalObserver', obs);
    };
    var addLoadDefaultsIfUndefined = function (cli) {
        return typeof cli.flags.loadDefaultInputs === "undefined"
            ? _.set(cli, 'flags.loadDefaultInputs', true)
            : cli;
    };
    var cliSignalObserver = new Rx.Subject();
    var killSwitches$ = new Rx.Subject();
    killSwitches$.subscribe(function () {
        process.exit(1);
    });
    file_utils_1.Right(parsed.cli)
        .map(function (cli) { return addLoadDefaultsIfUndefined(cli); })
        .chain(function (cli) { return index_1.getSetup(cli); })
        .map(function (x) { return addReporterIfMissing(x, cliDefaultReporter); })
        .map(function (x) { return addSignalFnIfMissing(x, cliSignalObserver); })
        .fold(function (err) {
        // todo log input errors
        cliDefaultReporter(err);
        killSwitches$.onNext(true);
        return err;
    }, function (setup) {
        setup.reportFn({
            type: reports.ReportTypes.UsingInputFile, data: { sources: setup.userInput.sources }
        });
        if (parsed.cli.command === 'run') {
            runWithSetup(setup, killSwitches$);
        }
        if (parsed.cli.command === 'docs') {
            docsWithSetup(setup, killSwitches$);
        }
        if (parsed.cli.command === 'init') {
            initWithSetup(setup, killSwitches$);
        }
        if (parsed.cli.command === 'tasks' || parsed.cli.command === 'ls') {
            tasksWithSetup(setup, killSwitches$);
        }
        if (parsed.cli.command === 'watch') {
            watchWithSetup(setup, killSwitches$);
        }
        if (parsed.cli.command === 'watchers') {
            watchersWithSetup(setup, killSwitches$);
        }
    });
}
function runWithSetup(prepared, killSwitches$) {
    var setUp$ = new Rx.BehaviorSubject({});
    var progress$ = new Rx.BehaviorSubject([]);
    var summaryGiven = false; // todo remove the need for this as it breaks the encapsulation
    var exitSignal$ = prepared.config.signalObserver
        .filter(function (x) { return x.type === config_1.SignalTypes.Exit; })
        .do(function (cbSignal) { return prepared.reportFn({
        type: reports.ReportTypes.SignalReceived,
        data: cbSignal.data
    }); })
        .withLatestFrom(setUp$, progress$, function (signal, setup, reports) {
        return { reports: reports, setup: setup, signal: signal };
    });
    var exits$ = Rx.Observable.zip(Rx.Observable.just(true).timestamp(prepared.config.scheduler), exitSignal$.timestamp(prepared.config.scheduler), function (begin, signal) {
        return { begin: begin, signal: signal };
    }).do(function (incoming) {
        var signal = incoming.signal, begin = incoming.begin;
        var setup = signal.value.setup;
        var reports = signal.value.reports;
        var startTime = begin.timestamp;
        var endTime = signal.timestamp;
        /**
         * Main summary report, although here it could be partial
         * (as an exit command could occur at any time)
         */
        if ((setup.tasks.valid.length * 2) !== reports.length) {
            if (!summaryGiven) {
                summaryGiven = true;
                handleCompletion(reports, setup, endTime - startTime);
            }
        }
        else {
            console.log("Exit signal, but summary given from main handler");
        }
    });
    var reports$ = index_1.handleIncoming(prepared)
        .do(function (x) { return setUp$.onNext(x.setup); }) // first item is the setup
        .flatMap(function (x) {
        if (x.setup.errors.length) {
            killSwitches$.onNext(true);
            return Rx.Observable.empty();
        }
        if (x.setup.tasks.invalid.length) {
            killSwitches$.onNext(true);
            return Rx.Observable.empty();
        }
        return x.update$;
    })
        .do(function (x) { return progress$.onNext(progress$.getValue().concat(x)); })
        .do(function (report) {
        prepared.reportFn({
            type: reports.ReportTypes.TaskReport,
            data: {
                report: report,
                config: prepared.config
            }
        });
    })
        .takeUntil(exits$)
        .toArray()
        .filter(function (reports) { return reports.length > 0; })
        .timestamp(prepared.config.scheduler)
        .withLatestFrom(setUp$, function (incoming, setup) {
        return {
            setup: setup,
            reports: incoming.value,
            timestamp: incoming.timestamp
        };
    });
    Rx.Observable.zip(Rx.Observable.just(true).timestamp(prepared.config.scheduler), reports$, function (begin, result) {
        return { begin: begin, result: result };
    }).subscribe(function (incoming) {
        if (!summaryGiven) {
            summaryGiven = true;
            handleCompletion(incoming.result.reports, incoming.result.setup, incoming.result.timestamp - incoming.begin.timestamp);
        }
    });
    /**
     * Handle file-writes
     * @type {Rx.Observable<CBSignal<FileWriteSignal>>|Rx.Observable<T>}
     */
    prepared.config.signalObserver
        .filter(function (x) { return x.type === config_1.SignalTypes.FileWrite; })
        .do(function (x) {
        if (prepared.config.dryRun) {
            // should skip / noop here
        }
        else {
            file.writeFileToDisk(x.data.file, x.data.content);
        }
    }).subscribe();
    /**
     * Because errors are handled by reports, task executions ALWAYS complete
     * and we handle that here.
     */
    function handleCompletion(taskReports, setup, runtime) {
        /**
         * Merge sequence tree with Task Reports
         */
        var decoratedSequence = seq.decorateSequenceWithReports(setup.sequence, taskReports);
        /**
         * Push a 'Completion report' onto the $complete Observable.
         * This means consumers will get everything when they call
         */
        var errors = taskReports.filter(function (x) { return x.type === task_runner_1.TaskReportType.error; });
        var completeData = {
            errors: errors,
            runtime: runtime,
            taskErrors: errors,
            sequence: decoratedSequence,
            cli: prepared.cli,
            config: prepared.config
        };
        /**
         * Main summary report
         */
        prepared.reportFn({
            type: reports.ReportTypes.Summary,
            data: completeData
        });
        require("./command.run.post-execution").postCliExecution(completeData);
    }
}
function docsWithSetup(prepared, killSwitches$) {
    index_1.handleIncoming(prepared)
        .pluck("setup")
        .subscribe(function (setup) {
        if (setup.errors.length) {
            return killSwitches$.onNext(true);
        }
        if (setup.output) {
            setup.output.forEach(function (outputItem) {
                file.writeFileToDisk(outputItem.file, outputItem.content);
            });
        }
    });
}
function initWithSetup(prepared, killSwitches$) {
    index_1.handleIncoming(prepared)
        .pluck("setup")
        .subscribe(function (setup) {
        if (setup.errors.length) {
            return killSwitches$.onNext(true);
        }
        fs_1.writeFileSync(setup.outputFilePath, fs_1.readFileSync(setup.templateFilePath));
    });
}
function tasksWithSetup(prepared, killSwitches$) {
    index_1.handleIncoming(prepared)
        .subscribe(function (x) {
        var _a = x.setup, groups = _a.groups, tasks = _a.tasks;
        var invalid = groups.reduce(function (acc, group) { return acc.concat(group.tasks.invalid); }, []);
        if (invalid.length || prepared.config.verbose === 1 /* Verbose */) {
            return prepared.reportFn({
                type: reports.ReportTypes.TaskTree,
                data: {
                    tasks: tasks,
                    config: prepared.config,
                    title: invalid.length ? "Errors found:" : "Available Tasks:"
                }
            });
        }
        if (!groups.length) {
            return prepared.reportFn({ type: reports.ReportTypes.NoTasksAvailable });
        }
        prepared.reportFn({
            type: reports.ReportTypes.SimpleTaskList,
            data: { setup: x.setup }
        });
    });
}
function watchWithSetup(prepared, killSwitches$) {
    index_1.handleIncoming(prepared)
        .flatMap(function (x) {
        if (x.setup.errors.length) {
            killSwitches$.onNext(true);
            return Rx.Observable.empty();
        }
        return x.update$; // start the watchers
    })
        .subscribe();
}
function watchersWithSetup(prepared, killSwitches$) {
    index_1.handleIncoming(prepared)
        .pluck("setup")
        .subscribe(function (setup) {
        if (setup.errors.length) {
            return killSwitches$.onNext(true);
        }
        prepared.reportFn({
            type: reports.ReportTypes.WatcherNames,
            data: { setup: setup }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,