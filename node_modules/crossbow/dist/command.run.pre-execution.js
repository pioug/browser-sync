"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var file = require("./file.utils");
var utils = require("./task.utils");
var file_utils_1 = require("./file.utils");
var reporter_resolve_1 = require("./reporter.resolve");
var Rx = require("rx");
var path_1 = require("path");
var config_1 = require("./config");
function createHashes(tasks, trigger) {
    var ifLookups = utils.concatProps(tasks, [], "ifChanged");
    if (!ifLookups.length)
        return Rx.Observable.empty();
    var existingFile = file.readOrCreateJsonFile(path_1.join(".crossbow", "history.json"), trigger.config.cwd);
    if (!existingFile.data.hashes) {
        existingFile.data.hashes = [];
    }
    return file.hashItems(ifLookups, trigger.config.cwd, existingFile.data.hashes)
        .do(function (hashResults) {
        // Write the hashes to disk
        trigger.config.signalObserver.onNext({
            type: config_1.SignalTypes.FileWrite,
            data: {
                file: existingFile,
                content: JSON.stringify({ hashes: hashResults.output }, null, 2)
            }
        });
    })
        .map(function (hashResults) {
        // Send in the marked hashes to the run context
        // so that matching tasks can be ignored
        return {
            "ifChanged": hashResults.markedHashes
        };
    })
        .take(1)
        .catch(function (e) {
        if (e.code === "ENOTDIR")
            e.type = file_utils_1.HashDirErrorTypes.HashNotADirectory;
        if (e.code === "ENOENT")
            e.type = file_utils_1.HashDirErrorTypes.HashPathNotFound;
        trigger.reporter({
            type: reporter_resolve_1.ReportTypes.HashDirError,
            data: {
                error: e,
                cwd: trigger.config.cwd
            }
        });
        return Rx.Observable.just({});
    });
}
exports.createHashes = createHashes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5ydW4ucHJlLWV4ZWN1dGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tYW5kLnJ1bi5wcmUtZXhlY3V0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsbUNBQXFDO0FBQ3JDLG9DQUFzQztBQUN0QywyQ0FBK0M7QUFDL0MsdURBQW1FO0FBQ25FLHVCQUEwQjtBQUMxQiw2QkFBMEI7QUFDMUIsbUNBQXFDO0FBRXJDLFNBQWdCLFlBQVksQ0FBQyxLQUFhLEVBQUUsT0FBdUI7SUFFL0QsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRTVELElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTTtRQUFFLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUVwRCxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBSSxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXRHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUMzQixZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7S0FDakM7SUFFRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ3pFLEVBQUUsQ0FBQyxVQUFDLFdBQThCO1FBQy9CLDJCQUEyQjtRQUMzQixPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7WUFDakMsSUFBSSxFQUFFLG9CQUFXLENBQUMsU0FBUztZQUMzQixJQUFJLEVBQUU7Z0JBQ0YsSUFBSSxFQUFFLFlBQVk7Z0JBQ2xCLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxNQUFNLEVBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQ2pFO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDO1NBQ0QsR0FBRyxDQUFDLFVBQVUsV0FBOEI7UUFDekMsK0NBQStDO1FBQy9DLHdDQUF3QztRQUN4QyxPQUFPO1lBQ0gsV0FBVyxFQUFFLFdBQVcsQ0FBQyxZQUFZO1NBQ3hDLENBQUM7SUFDTixDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ1AsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUVkLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTO1lBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyw4QkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQztRQUN2RSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUTtZQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsOEJBQWlCLENBQUMsZ0JBQWdCLENBQUM7UUFFdEUsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUNiLElBQUksRUFBRSw4QkFBVyxDQUFDLFlBQVk7WUFDOUIsSUFBSSxFQUFFO2dCQUNGLEtBQUssRUFBRSxDQUFDO2dCQUNSLEdBQUcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUc7YUFDSjtTQUMxQixDQUFDLENBQUM7UUFFSCxPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQTlDRCxvQ0E4Q0MifQ==