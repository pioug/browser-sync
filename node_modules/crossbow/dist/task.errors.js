"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var task_resolve_1 = require("./task.resolve");
var task_utils_1 = require("./task.utils");
var _ = require("../lodash.custom");
var TaskErrorTypes;
(function (TaskErrorTypes) {
    TaskErrorTypes[TaskErrorTypes["TaskNotFound"] = "TaskNotFound"] = "TaskNotFound";
    TaskErrorTypes[TaskErrorTypes["SubtasksNotInConfig"] = "SubtasksNotInConfig"] = "SubtasksNotInConfig";
    TaskErrorTypes[TaskErrorTypes["SubtaskNotProvided"] = "SubtaskNotProvided"] = "SubtaskNotProvided";
    TaskErrorTypes[TaskErrorTypes["SubtaskNotProvidedForParent"] = "SubtaskNotProvidedForParent"] = "SubtaskNotProvidedForParent";
    TaskErrorTypes[TaskErrorTypes["SubtaskNotFound"] = "SubtaskNotFound"] = "SubtaskNotFound";
    TaskErrorTypes[TaskErrorTypes["SubtaskWildcardNotAvailable"] = "SubtaskWildcardNotAvailable"] = "SubtaskWildcardNotAvailable";
    TaskErrorTypes[TaskErrorTypes["AdaptorNotFound"] = "AdaptorNotFound"] = "AdaptorNotFound";
    TaskErrorTypes[TaskErrorTypes["FlagNotFound"] = "FlagNotFound"] = "FlagNotFound";
    TaskErrorTypes[TaskErrorTypes["CBFlagNotProvided"] = "CBFlagNotProvided"] = "CBFlagNotProvided";
    TaskErrorTypes[TaskErrorTypes["InvalidTaskInput"] = "InvalidTaskInput"] = "InvalidTaskInput";
    TaskErrorTypes[TaskErrorTypes["CircularReference"] = "CircularReference"] = "CircularReference";
    TaskErrorTypes[TaskErrorTypes["FileTypeNotSupported"] = "FileTypeNotSupported"] = "FileTypeNotSupported";
})(TaskErrorTypes = exports.TaskErrorTypes || (exports.TaskErrorTypes = {}));
function gatherTaskErrors(task, trigger) {
    return [
        getModuleErrors,
        getFileTypeErrors,
        getCBFlagErrors,
        getSubTaskErrors,
        getParentGroupErrors
    ].reduce(function (all, fn) { return all.concat(fn(task, trigger)); }, []);
}
exports.gatherTaskErrors = gatherTaskErrors;
function getModuleErrors(task, trigger) {
    if (task.type === task_resolve_1.TaskTypes.ParentGroup)
        return [];
    if (task.type === task_resolve_1.TaskTypes.ExternalTask)
        return [];
    if (task.type === task_resolve_1.TaskTypes.InlineFunction)
        return [];
    /**
     * If a module was not located, and there are 0 child tasks,
     * this can be classified as a `module not found error`
     */
    if (task.externalTasks.length === 0 && task.tasks.length === 0) {
        var matchSorter = require('match-sorter');
        return [{
                type: TaskErrorTypes.TaskNotFound,
                taskName: task.taskName,
                cwd: trigger.config.cwd,
                possible: matchSorter(task_utils_1.getPossibleTaskNames(trigger.input), task.taskName, { threshold: matchSorter.rankings.NO_MATCH })
            }];
    }
    return [];
}
function getFileTypeErrors(task, trigger) {
    /**
     * If it's not an external task, this can never be an error
     */
    if (task.type !== task_resolve_1.TaskTypes.ExternalTask)
        return [];
    var supported = task_utils_1.isSupportedFileType(task.externalTasks[0].parsed.ext);
    if (supported)
        return [];
    return [{
            type: TaskErrorTypes.FileTypeNotSupported,
            taskName: task.taskName,
            externalFile: task.externalTasks[0]
        }];
}
function getCBFlagErrors(task, trigger) {
    return task.cbflags.reduce(function (all, flag) {
        /**
         * if `flag` is an empty string, the user provided an @ after a task
         * name, but without the right-hand part.
         * eg:
         *   $ crossbow run build-css@
         *
         * when it should of been
         *   $ crossbow run build-css@p
         *
         */
        if (flag === "") {
            return all.concat({
                type: TaskErrorTypes.CBFlagNotProvided,
                taskName: task.taskName
            });
        }
        return all;
    }, []);
}
function getSubTaskErrors(task, trigger) {
    if (task.type === task_resolve_1.TaskTypes.ParentGroup)
        return [];
    /**
     * Now validate any sub tasks given with colon syntax
     *  eg: sass:dev
     *   -> must have a configuration object under the key sass.dev
     *   -> VALID
     *      config:
     *        sass:
     *          dev: 'input.scss'
     */
    return task.subTasks.reduce(function (all, subTaskName) {
        var configKeys = (function () {
            var taskOptions = Object.keys(_.get(task, "options", {}));
            if (taskOptions.length) {
                return taskOptions;
            }
            return Object.keys(_.get(trigger.input, ["options"].concat(task.baseTaskName), {}));
        })();
        /**
         * if `name` is an empty string, the user provided a colon-separated task
         * name without the right-hand part.
         * eg:
         *   $ crossbow run sass:
         *
         * when it should of been
         *   $ crossbow run sass:site:dev
         *
         */
        if (subTaskName === "") {
            return all.concat({
                type: TaskErrorTypes.SubtaskNotProvided,
                name: subTaskName
            });
        }
        /**
         * if a star was given as a subTask,
         * then this item must have configuration
         * as we'll want to run once with each key
         */
        if (subTaskName === "*") {
            return all.concat(handleWildcardSubtask(configKeys, subTaskName));
        }
        /**
         * Now check if this is an attempt at loading a grouped task
         */
        if (subTaskName.length) {
            var matching = task.tasks.filter(function (x) { return x.taskName === subTaskName; });
            if (matching.length)
                return all;
        }
        if (!configKeys.length) {
            return all.concat({
                type: TaskErrorTypes.SubtasksNotInConfig,
                name: subTaskName
            });
        }
        /**
         * Finally check if there's configuration that Matches this
         * key.
         */
        var match = _.get(trigger.input, ["options"].concat(task.baseTaskName, subTaskName));
        var match2 = _.get(task, ["options"].concat(subTaskName));
        if (match === undefined && match2 === undefined) {
            return all.concat({
                type: TaskErrorTypes.SubtaskNotFound,
                name: subTaskName
            });
        }
        return all;
    }, []);
}
function getParentGroupErrors(task, trigger) {
    /**
     * This only applies to ParentGroups
     */
    if (task.type !== task_resolve_1.TaskTypes.ParentGroup)
        return [];
    /**
     * If the type is a ParentGroup, it requires that a sub-task is provided also
     */
    if (task.subTasks[0] === "*") {
        var children = task_utils_1.getChildItems(task.baseTaskName, trigger.input.tasks);
        if (Object.keys(children).length) {
            return [];
        }
    }
    if (task.subTasks.length === 0) {
        var available = (function () {
            var match = task_utils_1.isParentGroupName(task.baseTaskName);
            if (match) {
                return Object.keys(_.get(trigger.input.tasks, [task.baseTaskName], {}));
            }
            return Object.keys(_.get(trigger.input.tasks, ["(" + task.baseTaskName + ")"], {}));
        })();
        return [{
                type: TaskErrorTypes.SubtaskNotProvidedForParent,
                name: task.baseTaskName,
                available: available
            }];
    }
    function match(name) {
        return _.get(trigger.input.tasks, ["(" + task.baseTaskName + ")", name]);
    }
    return task.subTasks.reduce(function (acc, subTask) {
        if (!match(subTask)) {
            return acc.concat([{
                    type: TaskErrorTypes.SubtaskNotFound,
                    name: subTask
                }]);
        }
        return acc;
    }, []);
}
function handleWildcardSubtask(configKeys, name) {
    if (configKeys.length) {
        return [];
    }
    return [{
            type: TaskErrorTypes.SubtaskWildcardNotAvailable,
            name: name
        }];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay5lcnJvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGFzay5lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwrQ0FBeUM7QUFDekMsMkNBQXlHO0FBR3pHLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRXRDLElBQVksY0FhWDtBQWJELFdBQVksY0FBYztJQUN0QixnREFBb0IsY0FBYyxrQkFBQSxDQUFBO0lBQ2xDLHVEQUEyQixxQkFBcUIseUJBQUEsQ0FBQTtJQUNoRCxzREFBMEIsb0JBQW9CLHdCQUFBLENBQUE7SUFDOUMsK0RBQW1DLDZCQUE2QixpQ0FBQSxDQUFBO0lBQ2hFLG1EQUF1QixpQkFBaUIscUJBQUEsQ0FBQTtJQUN4QywrREFBbUMsNkJBQTZCLGlDQUFBLENBQUE7SUFDaEUsbURBQXVCLGlCQUFpQixxQkFBQSxDQUFBO0lBQ3hDLGdEQUFvQixjQUFjLGtCQUFBLENBQUE7SUFDbEMscURBQXlCLG1CQUFtQix1QkFBQSxDQUFBO0lBQzVDLG9EQUF3QixrQkFBa0Isc0JBQUEsQ0FBQTtJQUMxQyxxREFBeUIsbUJBQW1CLHVCQUFBLENBQUE7SUFDNUMsd0RBQTRCLHNCQUFzQiwwQkFBQSxDQUFBO0FBQ3RELENBQUMsRUFiVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQWF6QjtBQUVELFNBQWdCLGdCQUFnQixDQUFDLElBQVUsRUFBRSxPQUF1QjtJQUNoRSxPQUFPO1FBQ0gsZUFBZTtRQUNmLGlCQUFpQjtRQUNqQixlQUFlO1FBQ2YsZ0JBQWdCO1FBQ2hCLG9CQUFvQjtLQUV2QixDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxFQUFFLElBQUssT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsRUFBN0IsQ0FBNkIsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM3RCxDQUFDO0FBVEQsNENB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