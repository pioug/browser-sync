"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var file_utils_1 = require("./file.utils");
var ReporterErrorTypes;
(function (ReporterErrorTypes) {
    ReporterErrorTypes[ReporterErrorTypes["ReporterFileNotFound"] = "ReporterFileNotFound"] = "ReporterFileNotFound";
    ReporterErrorTypes[ReporterErrorTypes["ReporterTypeNotSupported"] = "ReporterTypeNotSupported"] = "ReporterTypeNotSupported";
})(ReporterErrorTypes = exports.ReporterErrorTypes || (exports.ReporterErrorTypes = {}));
var ReporterTypes;
(function (ReporterTypes) {
    ReporterTypes[ReporterTypes["InlineFunction"] = "InlineFunction"] = "InlineFunction";
    ReporterTypes[ReporterTypes["ExternalFile"] = "ExternalFile"] = "ExternalFile";
    ReporterTypes[ReporterTypes["UnsupportedValue"] = "UnsupportedValue"] = "UnsupportedValue";
    ReporterTypes[ReporterTypes["Muted"] = "Muted"] = "Muted";
})(ReporterTypes = exports.ReporterTypes || (exports.ReporterTypes = {}));
var ReportTypes;
(function (ReportTypes) {
    ReportTypes[ReportTypes["DuplicateInputFile"] = "DuplicateInputFile"] = "DuplicateInputFile";
    ReportTypes[ReportTypes["InputFileCreated"] = "InputFileCreated"] = "InputFileCreated";
    ReportTypes[ReportTypes["InitInputFileTypeNotSupported"] = "InitInputFileTypeNotSupported"] = "InitInputFileTypeNotSupported";
    ReportTypes[ReportTypes["InputError"] = "InputError"] = "InputError";
    ReportTypes[ReportTypes["BinOptionError"] = "BinOptionError"] = "BinOptionError";
    ReportTypes[ReportTypes["EnvFileOptionError"] = "EnvFileOptionError"] = "EnvFileOptionError";
    ReportTypes[ReportTypes["InputFileNotFound"] = "InputFileNotFound"] = "InputFileNotFound";
    ReportTypes[ReportTypes["InvalidReporter"] = "InvalidReporter"] = "InvalidReporter";
    ReportTypes[ReportTypes["InvalidBinDirectory"] = "InvalidBinDirectory"] = "InvalidBinDirectory";
    ReportTypes[ReportTypes["UsingInputFile"] = "UsingInputFile"] = "UsingInputFile";
    ReportTypes[ReportTypes["TaskList"] = "TaskList"] = "TaskList";
    ReportTypes[ReportTypes["TaskTree"] = "TaskTree"] = "TaskTree";
    ReportTypes[ReportTypes["TaskErrors"] = "TaskErrors"] = "TaskErrors";
    ReportTypes[ReportTypes["TaskReport"] = "TaskReport"] = "TaskReport";
    ReportTypes[ReportTypes["NoTasksAvailable"] = "NoTasksAvailable"] = "NoTasksAvailable";
    ReportTypes[ReportTypes["NoTasksProvided"] = "NoTasksProvided"] = "NoTasksProvided";
    ReportTypes[ReportTypes["SimpleTaskList"] = "SimpleTaskList"] = "SimpleTaskList";
    ReportTypes[ReportTypes["BeforeWatchTaskErrors"] = "BeforeWatchTaskErrors"] = "BeforeWatchTaskErrors";
    ReportTypes[ReportTypes["BeforeTaskList"] = "BeforeTaskList"] = "BeforeTaskList";
    ReportTypes[ReportTypes["BeforeTasksDidNotComplete"] = "BeforeTasksDidNotComplete"] = "BeforeTasksDidNotComplete";
    ReportTypes[ReportTypes["BeforeTasksSummary"] = "BeforeTasksSummary"] = "BeforeTasksSummary";
    ReportTypes[ReportTypes["WatchTaskTasksErrors"] = "WatchTaskTasksErrors"] = "WatchTaskTasksErrors";
    ReportTypes[ReportTypes["WatchTaskErrors"] = "WatchTaskErrors"] = "WatchTaskErrors";
    ReportTypes[ReportTypes["WatchTaskReport"] = "WatchTaskReport"] = "WatchTaskReport";
    ReportTypes[ReportTypes["NoFilesMatched"] = "NoFilesMatched"] = "NoFilesMatched";
    ReportTypes[ReportTypes["NoWatchersAvailable"] = "NoWatchersAvailable"] = "NoWatchersAvailable";
    ReportTypes[ReportTypes["NoWatchTasksProvided"] = "NoWatchTasksProvided"] = "NoWatchTasksProvided";
    ReportTypes[ReportTypes["Watchers"] = "Watchers"] = "Watchers";
    ReportTypes[ReportTypes["WatcherNames"] = "WatcherNames"] = "WatcherNames";
    ReportTypes[ReportTypes["WatcherTriggeredTasksCompleted"] = "WatcherTriggeredTasksCompleted"] = "WatcherTriggeredTasksCompleted";
    ReportTypes[ReportTypes["WatcherTriggeredTasks"] = "WatcherTriggeredTasks"] = "WatcherTriggeredTasks";
    ReportTypes[ReportTypes["WatcherSummary"] = "WatcherSummary"] = "WatcherSummary";
    ReportTypes[ReportTypes["DocsAddedToFile"] = "DocsAddedToFile"] = "DocsAddedToFile";
    ReportTypes[ReportTypes["DocsGenerated"] = "DocsMarkdownGenerated"] = "DocsGenerated";
    ReportTypes[ReportTypes["DocsInputFileNotFound"] = "DocsInputFileNotFound"] = "DocsInputFileNotFound";
    ReportTypes[ReportTypes["DocsOutputFileExists"] = "DocsOutputFileExists"] = "DocsOutputFileExists";
    ReportTypes[ReportTypes["DocsInvalidTasksSimple"] = "DocsInvalidTasksSimple"] = "DocsInvalidTasksSimple";
    ReportTypes[ReportTypes["HashDirError"] = "HashDirError"] = "HashDirError";
    ReportTypes[ReportTypes["Summary"] = "Summary"] = "Summary";
    ReportTypes[ReportTypes["SignalReceived"] = "SignalReceived"] = "SignalReceived";
    ReportTypes[ReportTypes["CLIParserOutput"] = "CLIParserOutput"] = "CLIParserOutput";
})(ReportTypes = exports.ReportTypes || (exports.ReportTypes = {}));
function getReporters(config) {
    var reporters = (function () {
        /**
         * If --outputOnly (-q) was given, the user wants NO
         * output, other than output from child processes - this
         * is used for shell expansion within other tasks where
         * the 'using crossbow.yaml' or completions summaries are
         * unwanted.
         */
        if (config.outputOnly) {
            return [{
                    type: ReporterTypes.Muted,
                    callable: function () { },
                    errors: [],
                    sources: []
                }];
        }
        /**
         * At this point, a user may of provided a string (as a path to lookup)
         * or a function directly, so we use those to resolve the reporters.
         */
        return [].concat(config.reporters).map(getOneReporter);
    })();
    return {
        all: reporters,
        valid: reporters.filter(function (x) { return x.errors.length === 0; }),
        invalid: reporters.filter(function (x) { return x.errors.length > 0; })
    };
    function getOneReporter(reporter) {
        /**
         * If a function was given as a reported (eg: inline)
         * then it's ALWAYS a valid reporter
         */
        if (typeof reporter === "function") {
            return {
                type: ReporterTypes.InlineFunction,
                callable: reporter,
                errors: [],
                sources: []
            };
        }
        /**
         * If the reporter was not a string or function
         * it's definitely an unsupported type
         */
        if (typeof reporter !== "string") {
            return {
                type: ReporterTypes.UnsupportedValue,
                errors: [{ type: ReporterErrorTypes.ReporterTypeNotSupported }],
                sources: [reporter]
            };
        }
        var files = file_utils_1.readFilesFromDisk([reporter], config.cwd);
        var errors = files
            .reduce(function (acc, item) {
            // Convert errors from reading files
            // into errors about reporters
            // This is for correct context in logging
            if (item.errors.length) {
                return acc.concat({
                    type: ReporterErrorTypes.ReporterFileNotFound,
                    file: item
                });
            }
            return acc;
        }, []);
        /**
         * If any errors occurred, return them
         */
        if (errors.length) {
            return {
                type: ReporterTypes.ExternalFile,
                errors: errors,
                sources: files
            };
        }
        /**
         * Now try to 'require' the module. If it
         * does not contain a default export, create an error
         */
        var callable = require(files[0].resolved);
        if (typeof callable !== "function") {
            return {
                type: ReporterTypes.UnsupportedValue,
                errors: [{ type: ReporterErrorTypes.ReporterTypeNotSupported }],
                sources: [files[0]]
            };
        }
        /**
         * Here we have a valid external file to return
         * as a single reporter
         */
        return {
            type: ReporterTypes.ExternalFile,
            callable: callable,
            errors: [],
            sources: files
        };
    }
}
exports.getReporters = getReporters;
function getDefaultReporter() {
    return require("./reporters/defaultReporter").default;
}
exports.getDefaultReporter = getDefaultReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0ZXIucmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXBvcnRlci5yZXNvbHZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsMkNBQXdIO0FBd0J4SCxJQUFZLGtCQUdYO0FBSEQsV0FBWSxrQkFBa0I7SUFDMUIsZ0VBQTRCLHNCQUFzQiwwQkFBQSxDQUFBO0lBQ2xELG9FQUFnQywwQkFBMEIsOEJBQUEsQ0FBQTtBQUM5RCxDQUFDLEVBSFcsa0JBQWtCLEdBQWxCLDBCQUFrQixLQUFsQiwwQkFBa0IsUUFHN0I7QUFRRCxJQUFZLGFBS1g7QUFMRCxXQUFZLGFBQWE7SUFDckIsZ0RBQXdCLGdCQUFnQixvQkFBQSxDQUFBO0lBQ3hDLDhDQUF3QixjQUFjLGtCQUFBLENBQUE7SUFDdEMsa0RBQXdCLGtCQUFrQixzQkFBQSxDQUFBO0lBQzFDLHVDQUF3QixPQUFPLFdBQUEsQ0FBQTtBQUNuQyxDQUFDLEVBTFcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUFLeEI7QUFRRCxJQUFZLFdBK0NYO0FBL0NELFdBQVksV0FBVztJQUNuQixnREFBc0Msb0JBQW9CLHdCQUFBLENBQUE7SUFDMUQsOENBQXNDLGtCQUFrQixzQkFBQSxDQUFBO0lBQ3hELDJEQUFzQywrQkFBK0IsbUNBQUEsQ0FBQTtJQUNyRSx3Q0FBc0MsWUFBWSxnQkFBQSxDQUFBO0lBQ2xELDRDQUFzQyxnQkFBZ0Isb0JBQUEsQ0FBQTtJQUN0RCxnREFBc0Msb0JBQW9CLHdCQUFBLENBQUE7SUFDMUQsK0NBQXNDLG1CQUFtQix1QkFBQSxDQUFBO0lBQ3pELDZDQUFzQyxpQkFBaUIscUJBQUEsQ0FBQTtJQUN2RCxpREFBc0MscUJBQXFCLHlCQUFBLENBQUE7SUFDM0QsNENBQXNDLGdCQUFnQixvQkFBQSxDQUFBO0lBRXRELHNDQUFzQyxVQUFVLGNBQUEsQ0FBQTtJQUNoRCxzQ0FBc0MsVUFBVSxjQUFBLENBQUE7SUFDaEQsd0NBQXNDLFlBQVks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