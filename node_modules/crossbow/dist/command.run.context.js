"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Immutable = require("immutable");
var fromJS = Immutable.fromJS, Map = Immutable.Map;
var Rx = require("rx");
/**
 * A task context is just an Immutable Map of key=>value pairs
 * that may be used to provide addition context to the task running
 * environment. This is especially useful in situations where you need
 * to do something that MUST block the task running altogether. An example
 * would be hashing files/directories to determine if a task/group of tasks should
 * run.
 */
function getContext(tasks, trigger) {
    /**
     * Define a list of async actions
     * that must complete before any tasks are executed
     * @type {Array}
     */
    var preExecutionTasks = [
        require("./command.run.pre-execution").createHashes
    ];
    /**
     * Now wrap each Function in an observable
     * @type {Rx.Observable<PreExecutionTask>[]}
     */
    var observables = preExecutionTasks.map(function (fn) {
        return Rx.Observable.create(function (obs) {
            fn(tasks, trigger).subscribe(obs);
        });
    });
    /**
     * Run each item in sequence
     * finally producing an Immutable Map from all the gathered values
     */
    return Rx.Observable
        .from(observables)
        .concatAll()
        .toArray()
        .map(function (xs) {
        var _a;
        return (_a = Map({})).mergeDeep.apply(_a, xs.map(function (x) { return fromJS(x); }));
    });
}
exports.default = getContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5ydW4uY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tYW5kLnJ1bi5jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUNBQXdDO0FBRWpDLElBQUEseUJBQU0sRUFBRSxtQkFBRyxDQUFjO0FBRWhDLHVCQUEwQjtBQUkxQjs7Ozs7OztHQU9HO0FBQ0gsU0FBd0IsVUFBVSxDQUFDLEtBQWEsRUFBRSxPQUF1QjtJQUVyRTs7OztPQUlHO0lBQ0gsSUFBTSxpQkFBaUIsR0FBNEI7UUFDL0MsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUMsWUFBWTtLQUN0RCxDQUFDO0lBRUY7OztPQUdHO0lBQ0gsSUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFVBQUMsRUFBRTtRQUN6QyxPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRztZQUNyQyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUg7OztPQUdHO0lBQ0gsT0FBTyxFQUFFLENBQUMsVUFBVTtTQUNmLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDakIsU0FBUyxFQUFFO1NBQ1gsT0FBTyxFQUFFO1NBQ1QsR0FBRyxDQUFDLFVBQUEsRUFBRTs7UUFDSCxPQUFPLENBQUEsS0FBQSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxTQUFTLFdBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBVCxDQUFTLENBQUMsRUFBRTtJQUN4RCxDQUFDLENBQUMsQ0FBQztBQUNYLENBQUM7QUFoQ0QsNkJBZ0NDIn0=