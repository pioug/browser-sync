"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// todo why are these imports needed here?
var command_watch_1 = require("../command.watch");
var task_utils_1 = require("../task.utils");
var merge = require("../../lodash.custom").merge;
var fncount = 0;
var inlineWatcherCount = 0;
function incomingTask(taskname, deps, fn) {
    // only 2 params given (function last);
    if (typeof deps === "function") {
        fn = deps;
        deps = [];
    }
    var outgoing = {};
    if (task_utils_1.isPlainObject(deps) && deps.tasks) {
        if (deps.tasks) {
            outgoing[taskname] = deps;
        }
        else {
            throw new Error("Object literal must contain at least a \"tasks\" key");
        }
        if (fn) {
            var fnname = taskname + "_internal_fn_" + fncount++;
            outgoing[fnname] = fn;
            outgoing[taskname].tasks.push(fn);
        }
        return outgoing;
    }
    deps = [].concat(deps).filter(Boolean);
    if (deps.length) {
        if (!fn) {
            outgoing[taskname] = deps;
        }
        else {
            var fnname = taskname + "_internal_fn_" + fncount;
            outgoing[fnname] = fn;
            outgoing[taskname] = deps.concat(fnname);
        }
    }
    else {
        if (fn) {
            outgoing[taskname] = fn;
        }
    }
    return outgoing;
}
var input = {
    tasks: {},
    watch: {},
    options: {},
    env: {},
    config: {},
    cli: {},
    reporter: function () {
    } // to be set by lib
};
function incomingOptions(taskname, hash) {
    var outgoing = {};
    if (typeof taskname === "string") {
        outgoing[taskname] = hash;
        return outgoing;
    }
    return taskname;
}
exports.api = {
    input: input,
    env: function (obj) {
        input.env = merge(input.env, obj);
    },
    config: function (obj) {
        input.config = merge(input.config, obj);
    },
    task: function (taskname) {
        var res = incomingTask.apply(null, arguments);
        input.tasks = merge(input.tasks, res);
        return {
            options: function (hash) {
                var res = incomingOptions(taskname, hash);
                input.options = merge(input.options, res);
            }
        };
    },
    group: function (groupName, tasks) {
        input.tasks["(" + groupName + ")"] = tasks;
    },
    options: function (incoming) {
        var res = incomingOptions.apply(null, arguments);
        input.options = merge(input.options, res);
    },
    watch: function (patterns, tasks, options) {
        var watcher = getWatcher(patterns, tasks, options);
        var sub = watcher.flatMap(function (watchCommand) {
            return watchCommand.update$;
        });
        return sub.subscribe();
    },
    watcher: function (patterns, tasks, options) {
        var watcher = getWatcher(patterns, tasks, options);
        return watcher.flatMap(function (watchCommand) {
            return watchCommand.update$;
        });
    }
};
function getWatcher(patterns, tasks, options) {
    var identifer = "_inline_watcher_" + inlineWatcherCount++;
    patterns = [].concat(patterns);
    tasks = [].concat(tasks);
    input.watch[identifer] = {
        options: options,
        watchers: [
            {
                patterns: patterns,
                tasks: tasks
            }
        ]
    };
    var cliInput = ["watch", identifer];
    return command_watch_1.default({ input: cliInput, flags: {} }, input, input.config, input.reporter);
}
exports.default = input;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3B1YmxpYy9jcmVhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSwwQ0FBMEM7QUFDMUMsa0RBQStFO0FBRS9FLDRDQUE0QztBQUU1QyxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFJbkQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLElBQUksa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO0FBTTNCLFNBQVMsWUFBWSxDQUFDLFFBQWdCLEVBQUUsSUFBUyxFQUFFLEVBQVE7SUFFdkQsdUNBQXVDO0lBQ3ZDLElBQUksT0FBTyxJQUFJLEtBQUssVUFBVSxFQUFFO1FBQzVCLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDVixJQUFJLEdBQUcsRUFBRSxDQUFDO0tBQ2I7SUFFRCxJQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFFcEIsSUFBSSwwQkFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDbkMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUM3QjthQUFNO1lBQ0gsTUFBTSxJQUFJLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO1NBQzNFO1FBQ0QsSUFBSSxFQUFFLEVBQUU7WUFDSixJQUFNLE1BQU0sR0FBTSxRQUFRLHFCQUFnQixPQUFPLEVBQUksQ0FBQztZQUN0RCxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3RCLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsT0FBTyxRQUFRLENBQUM7S0FDbkI7SUFFRCxJQUFJLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxN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