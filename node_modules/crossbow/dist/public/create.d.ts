import { CBWatchOptions } from "../watch.resolve";
import { CrossbowConfiguration } from "../config";
import { WatchReport } from "../command.watch";
import { CLI } from "../index";
import IDisposable = Rx.IDisposable;
declare let input: {
    tasks: {};
    watch: {};
    options: {};
    env: {};
    config: CrossbowConfiguration;
    cli: CLI;
    reporter: () => void;
};
export declare const api: {
    input: {
        tasks: {};
        watch: {};
        options: {};
        env: {};
        config: CrossbowConfiguration;
        cli: CLI;
        reporter: () => void;
    };
    env: (obj: any) => void;
    config: (obj: any) => void;
    task: (taskname: string) => {
        options: (hash: any) => void;
    };
    group: (groupName: string, tasks: {}) => void;
    options: (incoming: {}) => void;
    watch: (patterns: string[], tasks: string[], options?: CBWatchOptions) => IDisposable;
    watcher: (patterns: string[], tasks: string[], options?: CBWatchOptions) => Rx.Observable<WatchReport>;
};
export default input;
