"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils = require("./task.utils");
var file = require("./file.utils");
var task_utils_1 = require("./task.utils");
var task_utils_2 = require("./task.utils");
var debug = require("debug")("cb:input");
var _ = require("../lodash.custom");
var InputTypes;
(function (InputTypes) {
    InputTypes[InputTypes["DefaultExternalFile"] = "DefaultExternalFile"] = "DefaultExternalFile";
    InputTypes[InputTypes["ExternalFile"] = "ExternalFile"] = "ExternalFile";
    InputTypes[InputTypes["InlineObject"] = "InlineObject"] = "InlineObject";
    InputTypes[InputTypes["StubInlineObject"] = "StubInlineObject"] = "StubInlineObject";
    InputTypes[InputTypes["CBFile"] = "CBFile"] = "CBFile";
    InputTypes[InputTypes["InlineJSON"] = "InlineJSON"] = "InlineJSON";
})(InputTypes = exports.InputTypes || (exports.InputTypes = {}));
function getInputs(config, inlineInput) {
    /**
     * If the User provided a -c flag we MUST validate this
     * request first as it may fail and then we don't want to continue
     */
    if (config.input.length) {
        debug("config flag provided " + config.input);
        var stringInputs = config.input.filter(function (x) { return typeof x === "string"; });
        var inlineInputs = config.input.filter(function (x) { return task_utils_2.isPlainObject(x); });
        var fileInputs = file.readInputFiles(stringInputs, config.cwd);
        var mergedFileInputs = fileInputs.valid.map(function (file) { return file.input; });
        var mergedInputs = _.merge.apply(_, [generateBaseInput({})].concat(mergedFileInputs, inlineInputs, [inlineInput]));
        if (fileInputs.invalid.length) {
            return {
                type: InputTypes.ExternalFile,
                errors: fileInputs.invalid.map(function (x) { return x.errors[0]; }),
                sources: fileInputs.invalid,
                inputs: [],
            };
        }
        return {
            type: InputTypes.ExternalFile,
            errors: [],
            sources: fileInputs.valid,
            inputs: [
                /**
                 * Merged all given configs into a single obj
                 * This is to allow, for example, production
                 * configuration to override dev etc..
                 */
                mergedInputs
            ],
        };
    }
    if (config.fromJson) {
        try {
            var parsed = JSON.parse(config.fromJson);
            return {
                errors: [],
                sources: [],
                type: InputTypes.InlineJSON,
                inputs: [generateBaseInput(parsed)]
            };
        }
        catch (e) {
            return {
                errors: [{ type: task_utils_1.InputErrorTypes.InvalidJson, json: config.fromJson, error: e }],
                sources: [],
                type: InputTypes.InlineJSON,
                inputs: []
            };
        }
    }
    /**
     * If the User provided --cbfile flag we MUST validate this
     * request first as it may fail and then we don't want to continue
     */
    if (config.cbfile) {
        debug("'cbfile' flag provided " + config.cbfile);
        var cbfiles = file.retrieveCBFiles(config);
        if (cbfiles.invalid.length) {
            return {
                type: InputTypes.CBFile,
                errors: cbfiles.invalid.map(function (x) { return x.errors[0]; }),
                sources: cbfiles.invalid,
                inputs: [],
            };
        }
        return {
            type: InputTypes.CBFile,
            errors: [],
            sources: cbfiles.valid,
            inputs: [],
        };
    }
    /**
     * Crossbow may be used with a simple object literal input.
     * This is how the test suit is even possible in such a system
     */
    if (utils.isPlainObject(inlineInput)) {
        debug("plain object given as input " + JSON.stringify(inlineInput));
        return {
            type: InputTypes.InlineObject,
            errors: [],
            sources: [],
            inputs: [generateBaseInput(inlineInput)]
        };
    }
    if (!config.loadDefaultInputs) {
        debug("config.loadDefaultInputs = false, not looking for default file types");
        return {
            errors: [],
            sources: [],
            type: InputTypes.StubInlineObject,
            inputs: [generateBaseInput({})]
        };
    }
    /**
     * Finally, try any cbfiles in the cwd
     */
    var defaultCbFiles = file.retrieveCBFiles(config);
    /**
     * If a cbfile.js **was** found in the current
     * directory, it will have been 'required' and therefor
     * some code will have run, which may of errored.
     * So here we check for that possible error by
     * filtering out `InputFileNotFound` errors (which simply mean
     * a cbfile.js was not found anyway.
     */
    var inputErrors = defaultCbFiles.invalid
        .filter(function (x) { return x.errors[0].type !== task_utils_1.InputErrorTypes.InputFileNotFound; });
    if (inputErrors.length) {
        return {
            type: InputTypes.CBFile,
            errors: inputErrors.map(function (x) { return x.errors[0]; }),
            sources: inputErrors,
            inputs: [],
        };
    }
    if (defaultCbFiles.valid.length) {
        debug("Default cbfile found " + defaultCbFiles.valid[0].resolved);
        return {
            errors: [],
            type: InputTypes.CBFile,
            sources: defaultCbFiles.valid,
            inputs: []
        };
    }
    /**
     * At this point, the user has not attempted to load any config files manually
     * so we try to load any defaults that are in the CWD
     */
    var defaultInputputFiles = file.retrieveDefaultInputFiles(config);
    var notMissingFileErrors = defaultInputputFiles.invalid
        .filter(function (x) { return x.errors[0].type !== task_utils_1.InputErrorTypes.InputFileNotFound; });
    if (notMissingFileErrors.length) {
        debug("Default input found with errors " + notMissingFileErrors[0].resolved);
        return {
            errors: notMissingFileErrors.reduce(function (acc, x) { return acc.concat(x.errors); }, []),
            type: InputTypes.DefaultExternalFile,
            sources: notMissingFileErrors,
            inputs: []
        };
    }
    if (defaultInputputFiles.valid.length) {
        debug("Default input found " + defaultInputputFiles.valid[0].resolved);
        return {
            errors: [],
            type: InputTypes.DefaultExternalFile,
            sources: defaultInputputFiles.valid,
            inputs: [generateBaseInput(defaultInputputFiles.valid[0].input)]
        };
    }
    /**
     * If we reach this point, we're working with
     * 1. NO external input files
     * 2. NO inline Object literal
     *
     * Which means we just need the stub objects, enough
     * to allow the system to work.
     */
    debug("No external input given/found, using default");
    return {
        errors: [],
        sources: [],
        type: InputTypes.InlineObject,
        inputs: [generateBaseInput({})]
    };
}
exports.getInputs = getInputs;
/**
 * `Input` is the object that is looked at to resolve tasks/options and
 * watchers
 */
function generateBaseInput(incoming) {
    return _.merge({
        tasks: {},
        watch: {
            before: [],
            options: {}
        },
        options: {},
        env: {}
    }, incoming || {});
}
exports.generateBaseInput = generateBaseInput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQucmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnB1dC5yZXNvbHZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0Esb0NBQXNDO0FBQ3RDLG1DQUFxQztBQUNyQywyQ0FBNkM7QUFFN0MsMkNBQTJDO0FBRTNDLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMzQyxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUV0QyxJQUFZLFVBT1g7QUFQRCxXQUFZLFVBQVU7SUFDbEIsK0NBQTJCLHFCQUFxQix5QkFBQSxDQUFBO0lBQ2hELHdDQUFvQixjQUFjLGtCQUFBLENBQUE7SUFDbEMsd0NBQW9CLGNBQWMsa0JBQUEsQ0FBQTtJQUNsQyw0Q0FBd0Isa0JBQWtCLHNCQUFBLENBQUE7SUFDMUMsa0NBQWMsUUFBUSxZQUFBLENBQUE7SUFDdEIsc0NBQWtCLFlBQVksZ0JBQUEsQ0FBQTtBQUNsQyxDQUFDLEVBUFcsVUFBVSxHQUFWLGtCQUFVLEtBQVYsa0JBQVUsUUFPckI7QUFTRCxTQUFnQixTQUFTLENBQUUsTUFBNkIsRUFBRSxXQUFpQjtJQUV2RTs7O09BR0c7SUFDSCxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3JCLEtBQUssQ0FBQywwQkFBd0IsTUFBTSxDQUFDLEtBQU8sQ0FBQyxDQUFDO1FBRTlDLElBQU0sWUFBWSxHQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFyQixDQUFxQixDQUFDLENBQUM7UUFDekUsSUFBTSxZQUFZLEdBQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSwwQkFBYSxDQUFDLENBQUMsQ0FBQyxFQUFoQixDQUFnQixDQUFDLENBQUM7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