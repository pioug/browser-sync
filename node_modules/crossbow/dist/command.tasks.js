"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var command_run_1 = require("./command.run");
var task_resolve_1 = require("./task.resolve");
var Rx = require("rx");
var file_utils_1 = require("./file.utils");
var task_utils_1 = require("./task.utils");
function execute(trigger) {
    var input = trigger.input, config = trigger.config;
    var allNames = Object.keys(trigger.input.tasks);
    var possibleParents = allNames.filter(function (x) { return task_utils_1.isParentGroupName(x); });
    var possibleDefaults = allNames.filter(function (x) { return !task_utils_1.isParentGroupName(x); });
    var cliInput = trigger.cli.input.slice(1);
    var defaultInputNames = cliInput.filter(function (x) { return !task_utils_1.isParentRef(x, possibleParents); });
    var parentInputNames = cliInput.filter(function (x) { return task_utils_1.isParentRef(x, possibleParents); });
    /**
     * Either resolve ALL tasks, or a subset if given
     * via the cli.
     *
     * eg:
     *      crossbow ls -> all tasks
     *      crossbow ls build-all -> only build all tasks
     */
    var defaultsToResolve = (function () {
        if (defaultInputNames.length) {
            return defaultInputNames;
        }
        if (parentInputNames.length) {
            return [];
        }
        var taskNamesFromTasksDir = file_utils_1.getPossibleTasksFromDirectories(config.tasksDir, config.cwd);
        return possibleDefaults.concat(taskNamesFromTasksDir);
    })();
    var parentsToResolve = (function () {
        if (parentInputNames.length) {
            return parentInputNames;
        }
        if (defaultInputNames.length) {
            return [];
        }
        return possibleParents;
    })();
    /**
     * Resolve the subset
     * @type {Tasks}
     */
    var resolvedDefault = task_resolve_1.resolveTasks(defaultsToResolve, trigger);
    var resolvedParents = parentsToResolve
        .map(task_utils_1.getChildName)
        .reduce(function (acc, key) {
        var childKeys = Object.keys(task_utils_1.getChildItems(key, input.tasks));
        var plainName = key.slice(1, -1);
        if (!acc[plainName]) {
            acc[plainName] = childKeys;
        }
        else {
            acc[plainName].push.apply(acc[plainName], childKeys);
        }
        return acc;
    }, {});
    function getParents(resolvedParents, trigger) {
        return Object.keys(resolvedParents).map(function (key) {
            var parent = resolvedParents[key];
            var items = parent.map(function (x) { return key + ":" + x; });
            var resolved = task_resolve_1.resolveTasks(items, trigger);
            return { title: key, tasks: resolved };
        });
    }
    var groups = (function () {
        if (resolvedDefault.all.length) {
            return [
                { title: "Default Tasks", tasks: resolvedDefault }
            ].concat(getParents(resolvedParents, trigger));
        }
        return getParents(resolvedParents, trigger);
    })();
    var tasks = groups.reduce(function (acc, group) {
        return acc.concat(group.tasks.all);
    }, []);
    return Rx.Observable.just({
        setup: {
            groups: groups,
            tasks: tasks,
            errors: []
        }
    });
}
function handleIncomingTasksCommand(cli, input, config, reporter) {
    return execute({
        cli: cli,
        input: input,
        config: config,
        reporter: reporter,
        type: command_run_1.TriggerTypes.command
    });
}
exports.default = handleIncomingTasksCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC50YXNrcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21tYW5kLnRhc2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkNBQTJEO0FBRzNELCtDQUF5RDtBQUd6RCx1QkFBMEI7QUFDMUIsMkNBQTZEO0FBQzdELDJDQUVzQjtBQW1CdEIsU0FBUyxPQUFPLENBQUMsT0FBdUI7SUFFN0IsSUFBQSxxQkFBSyxFQUFFLHVCQUFNLENBQWM7SUFFbEMsSUFBTSxRQUFRLEdBQVksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNELElBQU0sZUFBZSxHQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSw4QkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQyxDQUFDO0lBQ3JFLElBQU0sZ0JBQWdCLEdBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsOEJBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQztJQUV0RSxJQUFNLFFBQVEsR0FBWSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsSUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyx3QkFBVyxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsRUFBaEMsQ0FBZ0MsQ0FBQyxDQUFDO0lBQ2pGLElBQU0sZ0JBQWdCLEdBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLHdCQUFXLENBQUMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxFQUEvQixDQUErQixDQUFDLENBQUM7SUFFaEY7Ozs7Ozs7T0FPRztJQUNILElBQU0saUJBQWlCLEdBQUcsQ0FBQztRQUN2QixJ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