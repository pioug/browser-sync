"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var file_utils_1 = require("./file.utils");
var reports = require("./reporter.resolve");
var task_utils_1 = require("./task.utils");
var _ = require("../lodash.custom");
var fs_1 = require("fs");
var fs_2 = require("fs");
var path_1 = require("path");
var fs_3 = require("fs");
/**
 * If the user has specified the `bin` option,
 * we need to ensure these paths are valid directories
 * and read the executables from them
 */
exports.addBinLookupsToObject = function (config) {
    return config.bin.length
        // take the `config.bin` array and resolve each
        ? exports.getBins(config.bin, config.cwd)
            // if successful, add the directories and executables
            .map(function (bindirs) {
            return _.assign({}, config, {
                binDirectories: bindirs.valid,
                binExecutables: exports.getExecutables(bindirs.valid)
            });
        })
        : file_utils_1.Right(config);
};
/**
 * Resolve many bin paths
 */
exports.getBinLookups = function (paths, cwd) {
    return file_utils_1.Right([].concat(paths).map(function (path) { return exports.getBinLookup(path, cwd); }))
        .chain(function (xs) {
        return {
            all: xs,
            valid: xs.filter(function (x) { return x.errors.length === 0; }),
            invalid: xs.filter(function (x) { return x.errors.length > 0; })
        };
    });
};
/**
 * Resolve a single path. Allow for errors such as
 * not found or not a directory
 */
exports.getBinLookup = function (path, cwd) {
    return joinPath(String(path), cwd)
        .chain(function (resolved) { return file_utils_1.Right(resolved)
        .chain(function (resolved) { return binDirectoryExists(resolved); })
        .chain(function (resolved) { return isDirectory(resolved); })
        .fold(function (error) {
        return {
            errors: [error],
            resolved: resolved,
            input: path
        };
    }, function (resolved) {
        return {
            errors: [],
            resolved: resolved,
            input: path
        };
    }); });
};
/**
 * Resolve many bin directories, but if any produce an
 * error, return a Left() indicating that
 */
exports.getBins = function (dir, cwd) {
    return file_utils_1.Right(exports.getBinLookups(dir, cwd))
        .chain(function (x) { return x.invalid.length
        ? file_utils_1.Left({ type: reports.ReportTypes.BinOptionError, data: x })
        : file_utils_1.Right(x); });
};
/**
 * Scan a directory to retrieve an array of executables
 */
exports.getExecutables = function (dirs) {
    return dirs.reduce(function (acc, lookup) {
        var items = fs_2.readdirSync(lookup.resolved);
        return acc.concat(items.filter(function (dir) {
            try {
                return fs_1.statSync(path_1.join(lookup.resolved, dir)).isFile();
            }
            catch (e) {
                return false;
            }
        }));
    }, []);
};
var binDirectoryExists = function (path) {
    return fs_3.existsSync(path)
        ? file_utils_1.Right(path)
        : file_utils_1.Left({ type: task_utils_1.InputErrorTypes.BinDirectoryNotFound });
};
var isDirectory = function (path) {
    return fs_1.statSync(path).isDirectory()
        ? file_utils_1.Right(path)
        : file_utils_1.Left({ type: task_utils_1.InputErrorTypes.BinPathNotADirectory });
};
var joinPath = function (path, cwd) { return file_utils_1.Right(path_1.join(cwd, path)); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NldHVwLmJpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUF5QztBQUN6Qyw0Q0FBOEM7QUFDOUMsMkNBQTZDO0FBQzdDLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3RDLHlCQUE0QjtBQUU1Qix5QkFBK0I7QUFDL0IsNkJBQTBCO0FBQzFCLHlCQUE4QjtBQUU5Qjs7OztHQUlHO0FBQ1UsUUFBQSxxQkFBcUIsR0FBRyxVQUFBLE1BQU07SUFDdkMsT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU07UUFDYiwrQ0FBK0M7UUFDL0MsQ0FBQyxDQUFDLGVBQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDN0IscURBQXFEO2FBQ3BELEdBQUcsQ0FBQyxVQUFBLE9BQU87WUFDUixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRTtnQkFDeEIsY0FBYyxFQUFFLE9BQU8sQ0FBQyxLQUFLO2dCQUM3QixjQUFjLEVBQUUsc0JBQWMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO2FBQ2hELENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxrQkFBSyxDQUFDLE1BQU0sQ0FBQztBQVZuQixDQVVtQixDQUFDO0FBRXhCOztHQUVHO0FBQ1UsUUFBQSxhQUFhLEdBQUcsVUFBQyxLQUFlLEVBQUUsR0FBVztJQUN0RCxPQUFBLGtCQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxvQkFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO1NBQ3ZELEtBQUssQ0FBQyxVQUFBLEVBQUU7UUFDTCxPQUFPO1lBQ0gsR0FBRyxF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