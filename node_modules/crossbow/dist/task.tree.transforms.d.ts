import { Task } from "./task.resolve";
export interface TaskTreeTransform {
    predicate: (incoming: Task[]) => boolean;
    fn: (incoming: Task[]) => Task[];
}
export declare const transforms: {
    "Add skipped property to children": {
        predicate(tasks: Task[]): boolean;
        fn(tasks: Task[]): Task[];
    };
    "Add if property to children": {
        predicate(tasks: Task[]): boolean;
        fn(tasks: Task[]): Task[];
    };
    "Pass options/flags/query from Groups -> Tasks": {
        predicate(): boolean;
        fn(tasks: Task[]): Task[];
    };
};
/**
 * Allow transformations on tasks before error collections
 */
export declare function applyTreeTransforms(incoming: Task[]): Task[];
