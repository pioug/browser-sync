"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var file_utils_1 = require("./file.utils");
var reports = require("./reporter.resolve");
var task_utils_1 = require("./task.utils");
var _ = require("../lodash.custom");
/**
 * If the user has specified any `envFile` options,
 * we need to read each file from disk and parse it's data.
 * Finally we save the results on the incoming config object
 */
exports.addEnvFilesToObject = function (config) {
    return config.envFile.length
        // Take the `config.envFile` array and resolve each
        ? exports.getEnvFiles(config.envFile, config.envFilePrefix, config.cwd)
            // Add `envFiles` to config object
            .map(function (envFiles) {
            return _.assign({}, config, {
                envFiles: envFiles
            });
        })
        : file_utils_1.Right(config);
};
/**
 * Either wrapper to handle the fact that 1 or more of the envFile
 * options could've resulted in an error.
 * If that's the case, we want to return a Left that has the report type
 * `EnvFileOptionError` so that a nice error can be printed
 */
exports.getEnvFiles = function (envFile, globalPrefix, cwd) {
    return file_utils_1.Right([].concat(envFile).map(function (path) { return exports.getSingleEnvFile(path, globalPrefix, cwd); }))
        .map(function (xs) {
        return {
            all: xs,
            valid: xs.filter(function (x) { return x.errors.length === 0; }),
            invalid: xs.filter(function (x) { return x.errors.length > 0; })
        };
    })
        .chain(function (x) { return x.invalid.length
        ? file_utils_1.Left({ type: reports.ReportTypes.EnvFileOptionError, data: x })
        : file_utils_1.Right(x.valid); });
};
/**
 * Given a single `envFile` option, try to read & parse
 * a file from disk.
 */
exports.getSingleEnvFile = function (envFile, globalPrefix, cwd) {
    return file_utils_1.Right(envFile)
        // Get an array of 'lookupPath' and 'prefix' in the same scope
        .chain(function (envFileItem) { return file_utils_1.Right([getLookupPath(envFileItem), getPrefix(envFileItem, globalPrefix)])
        // destructure previous results
        .chain(function (_a) {
        var lookupPath = _a[0], prefix = _a[1];
        // Now attempt to read the file from disk
        return readEnvFile(lookupPath, cwd)
            // If an error occurs here, delegate to a `EnvFileNotFound` error
            .fold(function (file) {
            return file_utils_1.Left({
                input: lookupPath,
                file: file,
                prefix: prefix,
                errors: [{ type: task_utils_1.InputErrorTypes.EnvFileNotFound }]
            });
        }, function (r) { return file_utils_1.Right(r); }) // <-- otherwise continue with the result
            // Now we have a file successfully read from disk, keep it in scope
            .chain(function (file) {
            // Try to parse the data from it. (JSON/env could throw)
            return file_utils_1.tryCatch(function () { return parseData(file); })
                // If an error occurs in parsing, defer to `EnvFileParseError` error
                .fold(function (error) { return file_utils_1.Left({
                input: lookupPath,
                file: file,
                prefix: prefix,
                errors: [{ type: task_utils_1.InputErrorTypes.EnvFileParseError, error: error }]
            }); }, 
            // If the content parsed without error, return the final result
            function (parsedData) { return file_utils_1.Right({
                input: lookupPath,
                file: _.assign({}, file, { data: parsedData }),
                prefix: prefix, errors: []
            }); });
        });
    }); }).fold(function (e) { return e; }, function (r) { return r; }); // finally fold as we could've exited early todo: could this be removed?
};
/**
 * Wrapper for reading the env file from disk.
 * The result could have an 'errors' property so we
 * wrap this in the Either type
 */
var readEnvFile = function (lookupPath, cwd) {
    return file_utils_1.Right(file_utils_1.readFileFromDiskWithContent(lookupPath, cwd))
        .chain(function (result) { return result.errors.length
        ? file_utils_1.Left(result)
        : file_utils_1.Right(result); });
};
/**
 * Parse either json or regular .env file
 * @param file
 * @returns {any}
 */
function parseData(file) {
    if (file.parsed.ext === '.json') {
        return JSON.parse(file.content);
    }
    return file_utils_1.parseEnv(file.content);
}
/**
 * `envFile` could be either a string or object, so
 * we need to decide where to get the lookup path from
 *
 * -> envFile: package.json
 * -> envFile:
 *      path: package.json
 *      prefix: [npm, package]
 */
var getLookupPath = function (envFile) {
    return typeof envFile === 'string'
        ? envFile
        : envFile.path;
};
/**
 * envFiles can either have their own prefixes array, or
 * it will inherit from the global if not set.
 * @param envFile
 * @param globalPrefixes
 * @returns {any}
 */
var getPrefix = function (envFile, globalPrefixes) {
    if (typeof envFile === 'string') {
        return globalPrefixes;
    }
    if (envFile.prefix && envFile.prefix.length) {
        return [].concat(envFile.prefix);
    }
    return globalPrefixes;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuZW52RmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXR1cC5lbnZGaWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQStHO0FBQy9HLDRDQUE4QztBQUU5QywyQ0FBNkM7QUFDN0MsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFdEM7Ozs7R0FJRztBQUNVLFFBQUEsbUJBQW1CLEdBQUcsVUFBQSxNQUFNO0lBQ3JDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNO1FBQ3hCLG1EQUFtRDtRQUNuRCxDQUFDLENBQUMsbUJBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzRCxrQ0FBa0M7YUFDakMsR0FBRyxDQUFDLFVBQUEsUUFBUTtZQUNULE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFO2dCQUN4QixRQUFRLEVBQUUsUUFBUTthQUNyQixDQUFDLENBQUM7UUFDUCxDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsa0JBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4QixDQUFDLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNVLFFBQUEsV0FBVyxHQUFHLFVBQUMsT0FBZ0IsRUFBRSxZQUFzQixFQUFFLEdBQVc7SUFDN0UsT0FBQSxrQkFBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsd0JBQWdCLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxHQUFHLENBQUMsRUFBekMsQ0FBeUMsQ0FBQyxDQUFDO1NBQzNFLEdBQUcsQ0FBQyxVQUFBLEVBQUU7UUFDSCxPQUFPO1lBQ0gsR0FBRyxFQUFFLEVBQUU7WUFDUCxLQUFLLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBckIsQ0FBcUIsQ0FBQztZQUM1QyxPQUFPLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQztTQUMvQyxDQUFDO0lBQ04sQ0FBQyxDQUFDO1NBQ0QsS0FBSyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNO1FBQ3hCLENBQUMsQ0FBQyxpQkFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxrQkFBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFGUixDQUVRLENBQUM7QUFWekIsQ0FVeUIsQ0FBQztBQUU5Qjs7O0dBR0c7QUFDVSxRQUFBLGdCQUFnQixHQUFHLFVBQUMsT0FBZ0IsRUFBRSxZQUFzQixFQUFFLEdBQVc7SUFFbEYsT0FBTyxrQkFBSyxDQUFDLE9BQU8sQ0FBQztRQUNyQiw4REFBOEQ7U0FDekQsS0FBSyxDQUFDLFVBQUEsV0FBVyxJQUFJLE9BQUEsa0JBQUssQ0FBQyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsRUFBRSxTQUFTLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDL0YsK0JBQStCO1NBQzFCLEtBQUssQ0FBQyxVQUFDLEVBQW9CO1lBQW5CLGtCQUFVLEVBQUUsY0FBTTtRQUN2Qix5Q0FBeUM7UUFDekMsT0FBQSxXQUFXLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQztZQUM1QixpRUFBaUU7YUFDNUQsSUFBSSxDQUFDLFVBQUEsSUFBSTtZQUNOLE9BQU8saUJBQUksQ0FBQztnQkFDUixLQUFLLEVBQUUsVUFBVTtnQkFDakIsSUFBSSxNQUFBO2dCQUNKLE1BQU0sRUFBRSxNQUFNO2dCQUNkLE1BQU0sRUFBRSxDQUFDLEVBQUMsSUFBSSxFQUFFLDRCQUFlLENBQUMsZUFBZSxFQUFDLENBQUM7YUFDcEQsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxFQUFFLFVBQUEsQ0FBQyxJQUFJLE9BQUEsa0JBQUssQ0FBQyxDQUFDLENBQUMsRUFBUixDQUFRLENBQUMsQ0FBQyx5Q0FBeUM7WUFDM0QsbUVBQW1FO2FBQ2xFLEtBQUssQ0FBQyxVQUFDLElBQXlCO1lBQzdCLHdEQUF3RDtZQUN4RCxPQUFBLHFCQUFRLENBQUMsY0FBTSxPQUFBLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBZixDQUFlLENBQUM7Z0JBQy9CLG9FQUFvRTtpQkFDL0QsSUFBSSxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsaUJBQUksQ0FBQztnQkFDWixLQUFLLEVBQUUsVUFBVTtnQkFDakIsSUFBSSxNQUFBO2dCQUNKLE1BQU0sRUFBRSxNQUFNO2dCQUNkLE1BQU0sRUFBRSxDQUFDLEVBQUMsSUFBSSxFQUFFLDRCQUFlLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxPQUFBLEVBQUMsQ0FBQzthQUM3RCxDQUFDLEVBTFMsQ0FLVDtZQUNGLCtEQUErRDtZQUMvRCxVQUFBLFVBQVUsSUFBSSxPQUFBLGtCQUFLLENBQUM7Z0JBQ2hCLEtBQUssRUFBRSxVQUFVO2dCQUNqQixJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBQyxDQUFDO2dCQUM1QyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFO2FBQzdCLENBQUMsRUFKWSxDQUlaLENBQ0w7UUFkTCxDQWNLLENBQUM7SUEzQmQsQ0EyQmMsQ0FBQyxFQS9CRCxDQStCQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxFQUFELENBQUMsRUFBRSxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsRUFBRCxDQUFDLENBQUMsQ0FBQyxDQUFDLHdFQUF3RTtBQUMvSCxDQUFDLENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsSUFBTSxXQUFXLEdBQUcsVUFBQyxVQUFrQixFQUFFLEdBQVc7SUFDaEQsT0FBQSxrQkFBSyxDQUFDLHdDQUEyQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUM5QyxLQUFLLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU07UUFDakMsQ0FBQyxDQUFDLGlCQUFJLENBQUMsTUFBTSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLGtCQUFLLENBQUMsTUFBTSxDQUFDLEVBRkYsQ0FFRSxDQUFDO0FBSHhCLENBR3dCLENBQUM7QUFFN0I7Ozs7R0FJRztBQUNILFNBQVMsU0FBUyxDQUFDLElBQXlCO0lBQ3hDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssT0FBTyxFQUFFO1FBQzdCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDbkM7SUFDRCxPQUFPLHFCQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILElBQU0sYUFBYSxHQUFHLFVBQUMsT0FBZ0I7SUFDbkMsT0FBQSxPQUFPLE9BQU8sS0FBSyxRQUFRO1FBQ3ZCLENBQUMsQ0FBQyxPQUFPO1FBQ1QsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJO0FBRmxCLENBRWtCLENBQUM7QUFFdkI7Ozs7OztHQU1HO0FBQ0gsSUFBTSxTQUFTLEdBQUcsVUFBQyxPQUFnQixFQUFFLGNBQXdCO0lBQ3pELElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO1FBQzdCLE9BQU8sY0FBYyxDQUFDO0tBQ3pCO0lBQ0QsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ3pDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEM7SUFDRCxPQUFPLGNBQWMsQ0FBQztBQUMxQixDQUFDLENBQUMifQ==