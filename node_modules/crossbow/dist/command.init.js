"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var command_run_1 = require("./command.run");
var Immutable = require("immutable");
var Rx = require("rx");
var file = require("./file.utils");
var path_1 = require("path");
var reporter_resolve_1 = require("./reporter.resolve");
var _ = require("../lodash.custom");
var InitConfigFileErrorTypes;
(function (InitConfigFileErrorTypes) {
    InitConfigFileErrorTypes[InitConfigFileErrorTypes["InitInputFileExists"] = "InitInputFileExists"] = "InitInputFileExists";
    InitConfigFileErrorTypes[InitConfigFileErrorTypes["InitInputFileTypeNotSupported"] = "InitInputFileTypeNotSupported"] = "InitInputFileTypeNotSupported";
})(InitConfigFileErrorTypes = exports.InitConfigFileErrorTypes || (exports.InitConfigFileErrorTypes = {}));
var InitConfigFileTypes;
(function (InitConfigFileTypes) {
    InitConfigFileTypes[InitConfigFileTypes["yaml"] = "yaml"] = "yaml";
    InitConfigFileTypes[InitConfigFileTypes["js"] = "js"] = "js";
    InitConfigFileTypes[InitConfigFileTypes["json"] = "json"] = "json";
    InitConfigFileTypes[InitConfigFileTypes["cbfile"] = "cbfile"] = "cbfile";
})(InitConfigFileTypes = exports.InitConfigFileTypes || (exports.InitConfigFileTypes = {}));
function execute(trigger) {
    var _a;
    var config = trigger.config, reporter = trigger.reporter;
    var templateDir = path_1.join(__dirname, "..", "templates");
    var maybeExistingFileInputs = (_a = {},
        _a[InitConfigFileTypes.yaml] = "crossbow.yaml",
        _a[InitConfigFileTypes.js] = "crossbow.js",
        _a[InitConfigFileTypes.json] = "crossbow.json",
        _a[InitConfigFileTypes.cbfile] = "cbfile.js",
        _a);
    var outputFileName = maybeExistingFileInputs[config.type];
    if (outputFileName === undefined) {
        var errors_1 = [{
                type: InitConfigFileErrorTypes.InitInputFileTypeNotSupported,
                providedType: config.type,
                supportedTypes: maybeExistingFileInputs
            }];
        if (!config.handoff) {
            reporter({
                type: reporter_resolve_1.ReportTypes.InitInputFileTypeNotSupported,
                data: {
                    error: errors_1[0]
                }
            });
        }
        return Rx.Observable.just({
            setup: {
                existingFilesInCwd: [],
                matchingFiles: [],
                errors: errors_1
            }
        });
    }
    /**
     * Attempt to load existing config files from the CWD
     * @type {ExternalFile[]}
     */
    var existingFilesInCwd = file.readFilesFromDisk(_.values(maybeExistingFileInputs), config.cwd);
    /**
     * Now check if any of the existing files match the one the user
     * is attempting to create.
     *
     * eg:
     *  crossbow init --type js
     * -> crossbow.js already exists in cwd -> error
     *
     * eg:
     *  crossbow init --type yaml
     * -> crossbow.js already exists in cwd, which is ok because they want a .yaml file -> success
     *
     * @type {ExternalFile[]}
     */
    var matchingFiles = existingFilesInCwd
        .filter(function (x) { return x.errors.length === 0; })
        .filter(function (file) { return outputFileName === file.parsed.base; });
    var errors = (function () {
        if (matchingFiles.length) {
            return matchingFiles.map(function (file) {
                return { type: InitConfigFileErrorTypes.InitInputFileExists, file: file };
            });
        }
        return [];
    })();
    // /**
    //  * Allow consumer to handle executions
    //  */
    // if (config.handoff) {
    //     return Rx.Ob{existingFilesInCwd, matchingFiles, errors};
    // }
    if (errors.length) {
        reporter({
            type: reporter_resolve_1.ReportTypes.DuplicateInputFile,
            data: {
                error: errors[0]
            }
        });
        return Rx.Observable.just({
            setup: {
                existingFilesInCwd: existingFilesInCwd,
                matchingFiles: matchingFiles,
                errors: errors
            }
        });
    }
    var templateFilePath = path_1.join(templateDir, outputFileName);
    var outputFilePath = path_1.join(config.cwd, outputFileName);
    var output = {
        existingFilesInCwd: existingFilesInCwd,
        matchingFiles: matchingFiles,
        errors: errors,
        outputFilePath: outputFilePath,
        outputFileName: outputFileName,
        templateFilePath: templateFilePath
    };
    reporter({
        type: reporter_resolve_1.ReportTypes.InputFileCreated,
        data: {
            parsed: path_1.parse(outputFilePath)
        }
    });
    return Rx.Observable.just({ setup: output });
}
function handleIncomingInitCommand(cli, input, config, reporter) {
    return execute({
        shared: new Rx.BehaviorSubject(Immutable.Map({})),
        cli: cli,
        input: input,
        config: config,
        reporter: reporter,
        type: command_run_1.TriggerTypes.command
    });
}
exports.default = handleIncomingInitCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5pbml0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1hbmQuaW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUEyRDtBQUczRCxxQ0FBd0M7QUFDeEMsdUJBQTBCO0FBQzFCLG1DQUFxQztBQUVyQyw2QkFBaUM7QUFDakMsdURBQStDO0FBTS9DLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRXRDLElBQVksd0JBR1g7QUFIRCxXQUFZLHdCQUF3QjtJQUNoQywyRUFBMkIscUJBQXFCLHlCQUFBLENBQUE7SUFDaEQscUZBQXFDLCtCQUErQixtQ0FBQSxDQUFBO0FBQ3hFLENBQUMsRUFIVyx3QkFBd0IsR0FBeEIsZ0NBQXdCLEtBQXhCLGdDQUF3QixRQUduQztBQXNCRCxJQUFZLG1CQUtYO0FBTEQsV0FBWSxtQkFBbUI7SUFDM0Isa0RBQVksTUFBTSxVQUFBLENBQUE7SUFDbEIsZ0RBQVUsSUFBSSxRQUFBLENBQUE7SUFDZCxrREFBWSxNQUFNLFVBQUEsQ0FBQTtJQUNsQixvREFBYyxRQUFRLFlBQUEsQ0FBQTtBQUMxQixDQUFDLEVBTFcsbUJBQW1CLEdBQW5CLDJCQUFtQixLQUFuQiwyQkFBbUIsUUFLOUI7QUFFRCxTQUFTLE9BQU8sQ0FBQyxPQUF1Qjs7SUFDN0IsSUFBQSx1QkFBTSxFQUFFLDJCQUFRLENBQVk7SUFFbkMsSUFBTSxXQUFXLEdBQUcsV0FBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFdkQsSUFBTSx1QkFBdUI7UUFDekIsR0FBQyxtQkFBbUIsQ0FBQyxJQUFJLElBQUcsZUFBZTtRQUMzQyxHQUFDLG1CQUFtQixDQUFDLEVBQUUsSUFBRyxhQUFhO1FBQ3ZDLEdBQUMsbUJBQW1CLENBQUMsSUFBSSxJQUFHLGVBQWU7UUFDM0MsR0FBQyxtQkFBbUIsQ0FBQyxNQUFNLElBQUcsV0FBVztXQUM1QyxDQUFDO0lBRUYs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