"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var task_utils_1 = require("../task.utils");
var task_resolve_1 = require("../task.resolve");
var task_resolve_2 = require("../task.resolve");
var task_runner_1 = require("../task.runner");
var defaultReporter_1 = require("./defaultReporter");
function taskPreviews(item) {
    if (!item.tasks.length) {
        if (item.type === task_resolve_2.TaskTypes.InlineFunction) {
            if (item.inlineFunctions[0].name) {
                return "[ Function: " + item.inlineFunctions[0].name + " ]";
            }
            return "[ Function ]";
        }
    }
    var names = item.tasks.reduce(function (acc, task) {
        if (task.tasks.length && task.baseTaskName === "") {
            return acc.concat(task.tasks.map(function (x) { return defaultReporter_1.getLabel(x); }));
        }
        return acc.concat(defaultReporter_1.getLabel(task));
    }, [])
        .map(function (x) { return task_utils_1.escapeNewLines(x); });
    return "[ " + names.join(", ") + " ]";
}
function limit(inputString, linelength) {
    var rem = inputString.length - linelength;
    if (rem > 0) {
        return inputString.slice(0, linelength - 3) + "...";
    }
    return inputString;
}
function getSimpleTaskList(tasks, longest) {
    var filtered = tasks
        .filter(function (x) { return !task_utils_1.isInternal(x.taskName); })
        .filter(function (x) { return x.baseTaskName[0] !== "_"; });
    return twoCol(filtered, longest).map(function (x) { return x[0] + "  " + x[1]; });
}
exports.getSimpleTaskList = getSimpleTaskList;
function twoCol(tasks, longest) {
    var cols = process.stdout.columns;
    return tasks.map(function (task) {
        var outgoingName = (function () {
            if (task.type === task_resolve_2.TaskTypes.ParentGroup) {
                return task.baseTaskName + ":" + task.subTasks[0];
            }
            if (task.runMode === task_resolve_1.TaskRunModes.parallel) {
                return task.baseTaskName + " <p>";
            }
            return task.baseTaskName;
        })();
        var name = task_utils_1.padLine(outgoingName, longest + 1);
        var desclength = (cols - 6) - longest;
        var desc = (function () {
            if (task.description) {
                return "{bold:" + limit(task.description, desclength);
            }
            /**
             * .js files on disk
             */
            if (task.type === task_resolve_2.TaskTypes.ExternalTask) {
                return limit("Run via: " + task.externalTasks[0].parsed.name, desclength);
            }
            /**
             * .sh files on disk
             */
            if (task.origin === task_resolve_1.TaskOriginTypes.FileSystem) {
                return limit("Run via: " + task.externalTasks[0].parsed.name, desclength);
            }
            if (task.type === task_resolve_2.TaskTypes.ParentGroup) {
                return limit(taskPreviews(task), desclength);
            }
            return limit(taskPreviews(task), desclength);
        })();
        return ["{yellow:" + name + "}", desc];
    });
}
exports.twoCol = twoCol;
function twoColWatchers(runners) {
    var longest = task_utils_1.longestString(runners.valid.map(function (x) { return x.parent; }));
    var cols = process.stdout.columns;
    return runners.valid.map(function (runner) {
        var name = task_utils_1.padLine(runner.parent, longest + 1);
        var desclength = (cols - 6) - longest;
        var desc = limit(runner.patterns.length + " pattern(s), " + runner.tasks.length + " task(s)", desclength);
        return [name, desc];
    });
}
exports.twoColWatchers = twoColWatchers;
function _taskReport(report) {
    var skipped = report.item.task.skipped || report.stats.skipped;
    var item = report.item;
    var task = item.task;
    var labelPrefix = defaultReporter_1.getLabel(task);
    var label = task_utils_1.escapeNewLines((function () {
        if (item.subTaskName) {
            return item.task.taskName + ":{bold:" + item.subTaskName + "}";
        }
        if (item.viaName) {
            if (item.viaName.indexOf(":") > -1) {
                var split = item.viaName.split(":");
                return split[0] + ":{bold:" + split[1] + "}";
            }
            return item.viaName;
        }
        return labelPrefix;
    })());
    var withFlags = (function (label) {
        if (Object.keys(task.flags).length) {
            return "" + label + task.rawInput.replace(label, "");
        }
        return label;
    })(label);
    return (function (label) {
        if (report.type === task_runner_1.TaskReportType.start) {
            if (skipped) {
                return "{yellow:-} " + label + " {yellow:(skipped)}";
            }
            return "{yellow:>} " + label;
        }
        if (report.type === task_runner_1.TaskReportType.end) {
            if (skipped) {
                return "";
            }
            return "{green:\u2714} " + label + " {yellow:(" + duration(report.stats.duration) + ")}";
        }
        if (report.type === task_runner_1.TaskReportType.error) {
            return "{red:x} " + label;
        }
    })(withFlags);
}
exports._taskReport = _taskReport;
function duration(ms) {
    return String((Number(ms) / 1000).toFixed(2)) + "s";
}
exports.duration = duration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay5saXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JlcG9ydGVycy90YXNrLmxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBb0c7QUFDcEcsZ0RBQW9FO0FBQ3BFLGdEQUEwQztBQUUxQyw4Q0FBMEQ7QUFDMUQscURBQTJDO0FBTTNDLFNBQVMsWUFBWSxDQUFDLElBQVU7SUFFNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3BCLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyx3QkFBUyxDQUFDLGNBQWMsRUFBRTtZQUN4QyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFO2dCQUM5QixPQUFPLGlCQUFlLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFJLENBQUM7YUFDMUQ7WUFDRCxPQUFPLGNBQWMsQ0FBQztTQUN6QjtLQUNKO0lBRUQsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsSUFBVTtRQUM1QyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssRUFBRSxFQUFFO1lBQy9DLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLDBCQUFRLENBQUMsQ0FBQyxDQUFDLEVBQVgsQ0FBVyxDQUFDLENBQUMsQ0FBQztTQUN2RDtRQUNELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQywwQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUNELEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLDJCQUFjLENBQUMsQ0FBQyxDQUFDLEVBQWpCLENBQWlC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